{
    "sourceFile": "index.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 2,
            "patches": [
                {
                    "date": 1687543266802,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1687544201777,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2770,8 +2770,30 @@\n     });\n   }\n   /**\n    * 移动鼠标位置\n+   * \n+   * \n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+  \n    * @param x \n    * @param y \n    */\n   moveMouse(x, y) {\n"
                },
                {
                    "date": 1687544227620,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2770,30 +2770,8 @@\n     });\n   }\n   /**\n    * 移动鼠标位置\n-   * \n-   * \n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-  \n    * @param x \n    * @param y \n    */\n   moveMouse(x, y) {\n@@ -3841,5 +3819,4 @@\n   watchClipboard,\n   watchUSB,\n   windowJitter\n });\n-\n"
                }
            ],
            "date": 1687543266802,
            "name": "Commit-0",
            "content": "\"use strict\";\nvar __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __getOwnPropNames = Object.getOwnPropertyNames;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __commonJS = (cb, mod) => function __require() {\n  return mod || (0, cb[__getOwnPropNames(cb)[0]])((mod = { exports: {} }).exports, mod), mod.exports;\n};\nvar __export = (target, all) => {\n  for (var name in all)\n    __defProp(target, name, { get: all[name], enumerable: true });\n};\nvar __copyProps = (to, from, except, desc2) => {\n  if (from && typeof from === \"object\" || typeof from === \"function\") {\n    for (let key of __getOwnPropNames(from))\n      if (!__hasOwnProp.call(to, key) && key !== except)\n        __defProp(to, key, { get: () => from[key], enumerable: !(desc2 = __getOwnPropDesc(from, key)) || desc2.enumerable });\n  }\n  return to;\n};\nvar __toCommonJS = (mod) => __copyProps(__defProp({}, \"__esModule\", { value: true }), mod);\n\n// ../node_modules/argv-split/split.js\nvar require_split = __commonJS({\n  \"../node_modules/argv-split/split.js\"(exports, module2) {\n    \"use strict\";\n    var _CHARS;\n    function _defineProperty(obj, key, value) {\n      if (key in obj) {\n        Object.defineProperty(obj, key, { value, enumerable: true, configurable: true, writable: true });\n      } else {\n        obj[key] = value;\n      }\n      return obj;\n    }\n    module2.exports = split;\n    var MATRIX = {\n      // object is more readable than multi-dim array.\n      // object is more readable than multi-dim array.\n      0: [a, suq, a, a, a, EOF],\n      1: [eaue, aue, eaue, aue, aue, ue],\n      2: [e, a, duq, a, a, EOF],\n      3: [eaue, aue, aue, aue, eaue, ue],\n      4: [e, sq, dq, a, tp, EOF]\n    };\n    var escaped = false;\n    var single_quoted = false;\n    var double_quoted = false;\n    var ended = false;\n    var FLAGS = {\n      2: 0,\n      5: 1,\n      4: 2,\n      1: 3,\n      0: 4\n    };\n    function y() {\n      var sum = 0;\n      if (escaped) {\n        sum++;\n      }\n      if (single_quoted) {\n        sum += 2;\n      }\n      if (double_quoted) {\n        sum += 4;\n      }\n      return FLAGS[sum];\n    }\n    var BACK_SLASH = \"\\\\\";\n    var SINGLE_QUOTE = \"'\";\n    var DOUBLE_QUOTE = '\"';\n    var WHITE_SPACE = \" \";\n    var CARRIAGE_RETURN = \"\\n\";\n    function x() {\n      return c in CHARS ? CHARS[c] : CHARS.NORMAL;\n    }\n    var CHARS = (_CHARS = {}, _defineProperty(_CHARS, BACK_SLASH, 0), _defineProperty(_CHARS, SINGLE_QUOTE, 1), _defineProperty(_CHARS, DOUBLE_QUOTE, 2), _defineProperty(_CHARS, \"NORMAL\", 3), _defineProperty(_CHARS, WHITE_SPACE, 4), _defineProperty(_CHARS, CARRIAGE_RETURN, 5), _CHARS);\n    var c = \"\";\n    var stash = \"\";\n    var ret = [];\n    function reset() {\n      escaped = false;\n      single_quoted = false;\n      double_quoted = false;\n      ended = false;\n      c = \"\";\n      stash = \"\";\n      ret.length = 0;\n    }\n    function a() {\n      stash += c;\n    }\n    function sq() {\n      single_quoted = true;\n    }\n    function suq() {\n      single_quoted = false;\n    }\n    function dq() {\n      double_quoted = true;\n    }\n    function duq() {\n      double_quoted = false;\n    }\n    function e() {\n      escaped = true;\n    }\n    function ue() {\n      escaped = false;\n    }\n    function aue() {\n      stash += BACK_SLASH + c;\n      escaped = false;\n    }\n    function eaue() {\n      stash += c;\n      escaped = false;\n    }\n    function tp() {\n      if (stash) {\n        ret.push(stash);\n        stash = \"\";\n      }\n    }\n    function EOF() {\n      ended = true;\n    }\n    function split(str) {\n      if (typeof str !== \"string\") {\n        type_error(\"Str must be a string. Received \" + str, \"NON_STRING\");\n      }\n      reset();\n      var length = str.length;\n      var i = -1;\n      while (++i < length) {\n        c = str[i];\n        MATRIX[y()][x()]();\n        if (ended) {\n          break;\n        }\n      }\n      if (single_quoted) {\n        error(\"unmatched single quote\", \"UNMATCHED_SINGLE\");\n      }\n      if (double_quoted) {\n        error(\"unmatched double quote\", \"UNMATCHED_DOUBLE\");\n      }\n      if (escaped) {\n        error(\"unexpected end with \\\\\", \"ESCAPED_EOF\");\n      }\n      tp();\n      return ret;\n    }\n    function error(message, code) {\n      var err = new Error(message);\n      err.code = code;\n      throw err;\n    }\n    function type_error(message, code) {\n      var err = new TypeError(message);\n      err.code = code;\n      throw err;\n    }\n  }\n});\n\n// source/mian/hmc.ts\nvar hmc_exports = {};\n__export(hmc_exports, {\n  Auto: () => Auto,\n  Clipboard: () => Clipboard,\n  HMC: () => HMC,\n  HWND: () => HWND,\n  MessageError: () => MessageError,\n  MessageStop: () => MessageStop,\n  Process: () => Process,\n  Registr: () => Registr,\n  SetBlockInput: () => SetBlockInput,\n  SetSystemHOOK: () => SetSystemHOOK,\n  SetWindowInTaskbarVisible: () => SetWindowInTaskbarVisible,\n  Shell: () => Shell,\n  Sleep: () => Sleep,\n  Usb: () => Usb,\n  Watch: () => Watch,\n  WatchWindowForeground: () => WatchWindowForeground,\n  WatchWindowPoint: () => WatchWindowPoint,\n  WebView2OnlineInstall: () => WebView2OnlineInstall,\n  Window: () => Window,\n  _KeyboardcodeComparisonTable: () => _KeyboardcodeComparisonTable,\n  _KeyboardcodeEmenList: () => _KeyboardcodeEmenList,\n  _popen: () => _popen,\n  alert: () => alert,\n  analysisDirectPath: () => analysisDirectPath,\n  captureBmpToFile: () => captureBmpToFile,\n  clearClipboard: () => clearClipboard,\n  closedHandle: () => closedHandle,\n  confirm: () => confirm,\n  createDirSymlink: () => createDirSymlink,\n  createHardLink: () => createHardLink,\n  createMutex: () => createMutex,\n  createPathRegistr: () => createPathRegistr,\n  createSymlink: () => createSymlink,\n  default: () => hmc_default,\n  deleteFile: () => deleteFile,\n  desc: () => desc,\n  enumAllProcessHandle: () => enumAllProcessHandle,\n  enumChildWindows: () => enumChildWindows,\n  enumProcessHandle: () => enumProcessHandle,\n  enumRegistrKey: () => enumRegistrKey,\n  formatVolumePath: () => formatVolumePath,\n  freePort: () => freePort,\n  getAllWindows: () => getAllWindows,\n  getAllWindowsHandle: () => getAllWindowsHandle,\n  getBasicKeys: () => getBasicKeys,\n  getClipboardFilePaths: () => getClipboardFilePaths,\n  getClipboardSequenceNumber: () => getClipboardSequenceNumber,\n  getClipboardText: () => getClipboardText,\n  getColor: () => getColor,\n  getConsoleHandle: () => getConsoleHandle,\n  getCurrentMonitorRect: () => getCurrentMonitorRect,\n  getDetailsProcessList: () => getDetailsProcessList,\n  getDetailsProcessNameList: () => getDetailsProcessNameList,\n  getDeviceCaps: () => getDeviceCaps,\n  getDeviceCapsAll: () => getDeviceCapsAll,\n  getForegroundWindow: () => getForegroundWindow,\n  getForegroundWindowProcessID: () => getForegroundWindowProcessID,\n  getHandleProcessID: () => getHandleProcessID,\n  getHidUsbList: () => getHidUsbList,\n  getMainWindow: () => getMainWindow,\n  getMetrics: () => getMetrics,\n  getModulePathList: () => getModulePathList,\n  getMouseMovePoints: () => getMouseMovePoints,\n  getNumberRegKey: () => getNumberRegKey,\n  getPointWindow: () => getPointWindow,\n  getPointWindowMain: () => getPointWindowMain,\n  getPointWindowName: () => getPointWindowName,\n  getPointWindowProcessId: () => getPointWindowProcessId,\n  getProcessHandle: () => getProcessHandle,\n  getProcessList: () => getProcessList,\n  getProcessName: () => getProcessName,\n  getProcessNameList: () => getProcessNameList,\n  getProcessParentProcessID: () => getProcessParentProcessID,\n  getProcessThreadList: () => getProcessThreadList,\n  getProcessidFilePath: () => getProcessidFilePath,\n  getRegistrBuffValue: () => getRegistrBuffValue,\n  getRegistrDword: () => getRegistrDword,\n  getRegistrQword: () => getRegistrQword,\n  getShortcutLink: () => getShortcutLink,\n  getStringRegKey: () => getStringRegKey,\n  getSubProcessID: () => getSubProcessID,\n  getSystemIdleTime: () => getSystemIdleTime,\n  getSystemMenu: () => getSystemMenu,\n  getSystemMetricsLen: () => getSystemMetricsLen,\n  getTrayList: () => getTrayList,\n  getUsbDevsInfo: () => getUsbDevsInfo,\n  getVolumeList: () => getVolumeList,\n  getWebView2Info: () => getWebView2Info,\n  getWindowClassName: () => getWindowClassName,\n  getWindowRect: () => getWindowRect,\n  getWindowStyle: () => getWindowStyle,\n  getWindowTitle: () => getWindowTitle,\n  hasKeyActivate: () => hasKeyActivate,\n  hasMutex: () => hasMutex,\n  hasPortTCP: () => hasPortTCP,\n  hasPortUDP: () => hasPortUDP,\n  hasProcess: () => hasProcess,\n  hasRegistrKey: () => hasRegistrKey,\n  hasWebView2: () => hasWebView2,\n  hasWindowTop: () => hasWindowTop,\n  hideConsole: () => hideConsole,\n  hmc: () => hmc,\n  isAdmin: () => isAdmin,\n  isEnabled: () => isEnabled,\n  isHandle: () => isHandle,\n  isHandleWindowVisible: () => isHandleWindowVisible,\n  isInMonitorWindow: () => isInMonitorWindow,\n  isMouseMonitorWindow: () => isMouseMonitorWindow,\n  isProcess: () => isProcess,\n  isRegistrTreeKey: () => isRegistrTreeKey,\n  isSystemX64: () => isSystemX64,\n  keyboardHook: () => keyboardHook,\n  killProcess: () => killProcess,\n  killProcessName: () => killProcessName,\n  leftClick: () => leftClick,\n  listRegistrPath: () => listRegistrPath,\n  lookHandleCloseWindow: () => lookHandleCloseWindow,\n  lookHandleGetTitle: () => lookHandleGetTitle,\n  lookHandleSetTitle: () => lookHandleSetTitle,\n  lookHandleShowWindow: () => lookHandleShowWindow,\n  messageBox: () => messageBox,\n  mouse: () => mouse,\n  mouseHook: () => mouseHook,\n  native: () => native,\n  openApp: () => openApp,\n  openExternal: () => openExternal,\n  openPath: () => openPath,\n  openRegKey: () => openRegKey,\n  openURL: () => openURL,\n  platform: () => platform,\n  popen: () => popen,\n  powerControl: () => powerControl,\n  processWatchdog: () => processWatchdog,\n  ref: () => ref,\n  registr: () => registr,\n  removeStringRegKey: () => removeStringRegKey,\n  removeStringRegKeyWalk: () => removeStringRegKeyWalk,\n  removeStringRegValue: () => removeStringRegValue,\n  removeStringTree: () => removeStringTree,\n  rightClick: () => rightClick,\n  sendBasicKeys: () => sendBasicKeys,\n  sendKeyboard: () => sendKeyboard,\n  sendKeyboardSequence: () => sendKeyboardSequence,\n  setClipboardFilePaths: () => setClipboardFilePaths,\n  setClipboardText: () => setClipboardText,\n  setCloseWindow: () => setCloseWindow,\n  setCursorPos: () => setCursorPos,\n  setHandleTransparent: () => setHandleTransparent,\n  setRegistrDword: () => setRegistrDword,\n  setRegistrKey: () => setRegistrKey,\n  setRegistrQword: () => setRegistrQword,\n  setShortcutLink: () => setShortcutLink,\n  setShowWindow: () => setShowWindow,\n  setWindowEnabled: () => setWindowEnabled,\n  setWindowFocus: () => setWindowFocus,\n  setWindowIconForExtract: () => setWindowIconForExtract,\n  setWindowMode: () => setWindowMode,\n  setWindowTitle: () => setWindowTitle,\n  setWindowTop: () => setWindowTop,\n  showConsole: () => showConsole,\n  showMonitors: () => showMonitors,\n  shutMonitors: () => shutMonitors,\n  sleep: () => sleep,\n  system: () => system,\n  systemChcp: () => systemChcp,\n  systemStartTime: () => systemStartTime,\n  trash: () => trash,\n  updateWindow: () => updateWindow,\n  version: () => version,\n  watchClipboard: () => watchClipboard,\n  watchUSB: () => watchUSB,\n  windowJitter: () => windowJitter\n});\nmodule.exports = __toCommonJS(hmc_exports);\n\n// source/mian/chcpList.ts\nvar chcpList = {\n  37: \"IBM037\",\n  437: \"IBM437\",\n  500: \"IBM500\",\n  708: \"ASMO-708\",\n  720: \"DOS-720\",\n  737: \"ibm737\",\n  775: \"ibm775\",\n  850: \"ibm850\",\n  852: \"ibm852\",\n  855: \"IBM855\",\n  857: \"ibm857\",\n  858: \"IBM00858\",\n  860: \"IBM860\",\n  861: \"ibm861\",\n  862: \"DOS-862\",\n  863: \"IBM863\",\n  864: \"IBM864\",\n  865: \"IBM865\",\n  866: \"cp866\",\n  869: \"ibm869\",\n  870: \"IBM870\",\n  874: \"windows-874\",\n  875: \"cp875\",\n  932: \"shift_jis\",\n  936: \"gb2312\",\n  949: \"ks_c_5601-1987\",\n  950: \"big5\",\n  1026: \"IBM1026\",\n  1047: \"IBM01047\",\n  1140: \"IBM01140\",\n  1141: \"IBM01141\",\n  1142: \"IBM01142\",\n  1143: \"IBM01143\",\n  1144: \"IBM01144\",\n  1145: \"IBM01145\",\n  1146: \"IBM01146\",\n  1147: \"IBM01147\",\n  1148: \"IBM01148\",\n  1149: \"IBM01149\",\n  1200: \"utf-16\",\n  1201: \"unicodeFFFE\",\n  1250: \"windows-1250\",\n  1251: \"windows-1251\",\n  1252: \"windows-1252\",\n  1253: \"windows-1253\",\n  1254: \"windows-1254\",\n  1255: \"windows-1255\",\n  1256: \"windows-1256\",\n  1257: \"windows-1257\",\n  1258: \"windows-1258\",\n  1361: \"Johab\",\n  1e4: \"macintosh\",\n  10001: \"x-mac-japanese\",\n  10002: \"x-mac-chinesetrad\",\n  10003: \"x-mac-korean\",\n  10004: \"x-mac-arabic\",\n  10005: \"x-mac-hebrew\",\n  10006: \"x-mac-greek\",\n  10007: \"x-mac-cyrillic\",\n  10008: \"x-mac-chinesesimp\",\n  10010: \"x-mac-romanian\",\n  10017: \"x-mac-ukrainian\",\n  10021: \"x-mac-thai\",\n  10029: \"x-mac-ce\",\n  10079: \"x-mac-icelandic\",\n  10081: \"x-mac-turkish\",\n  10082: \"x-mac-croatian\",\n  12e3: \"utf-32\",\n  12001: \"utf-32BE\",\n  2e4: \"x-Chinese_CNS\",\n  20001: \"x-cp20001\",\n  20002: \"x_Chinese-Eten\",\n  20003: \"x-cp20003\",\n  20004: \"x-cp20004\",\n  20005: \"x-cp20005\",\n  20105: \"x-IA5\",\n  20106: \"x-IA5-German\",\n  20107: \"x-IA5-Swedish\",\n  20108: \"x-IA5-Norwegian\",\n  20127: \"us-ascii\",\n  20261: \"x-cp20261\",\n  20269: \"x-cp20269\",\n  20273: \"IBM273\",\n  20277: \"IBM277\",\n  20278: \"IBM278\",\n  20280: \"IBM280\",\n  20284: \"IBM284\",\n  20285: \"IBM285\",\n  20290: \"IBM290\",\n  20297: \"IBM297\",\n  20420: \"IBM420\",\n  20423: \"IBM423\",\n  20424: \"IBM424\",\n  20833: \"x-EBCDIC-KoreanExtended\",\n  20838: \"IBM-Thai\",\n  20866: \"koi8-r\",\n  20871: \"IBM871\",\n  20880: \"IBM880\",\n  20905: \"IBM905\",\n  20924: \"IBM00924\",\n  20932: \"EUC-JP\",\n  20936: \"x-cp20936\",\n  20949: \"x-cp20949\",\n  21025: \"cp1025\",\n  21866: \"koi8-u\",\n  28591: \"iso-8859-1\",\n  28592: \"iso-8859-2\",\n  28593: \"iso-8859-3\",\n  28594: \"iso-8859-4\",\n  28595: \"iso-8859-5\",\n  28596: \"iso-8859-6\",\n  28597: \"iso-8859-7\",\n  28598: \"iso-8859-8\",\n  28599: \"iso-8859-9\",\n  28603: \"iso-8859-13\",\n  28605: \"iso-8859-15\",\n  29001: \"x-Europa\",\n  38598: \"iso-8859-8-i\",\n  50220: \"iso-2022-jp\",\n  50221: \"csISO2022JP\",\n  50222: \"iso-2022-jp\",\n  50225: \"iso-2022-kr\",\n  50227: \"x-cp50227\",\n  51932: \"euc-jp\",\n  51936: \"EUC-CN\",\n  51949: \"euc-kr\",\n  52936: \"hz-gb-2312\",\n  54936: \"GB18030\",\n  57002: \"x-iscii-de\",\n  57003: \"x-iscii-be\",\n  57004: \"x-iscii-ta\",\n  57005: \"x-iscii-te\",\n  57006: \"x-iscii-as\",\n  57007: \"x-iscii-or\",\n  57008: \"x-iscii-ka\",\n  57009: \"x-iscii-ma\",\n  57010: \"x-iscii-gu\",\n  57011: \"x-iscii-pa\",\n  65e3: \"utf-7\",\n  65001: \"utf-8\"\n};\n\n// source/mian/vkKey.ts\nvar KeyboardcodeComparisonTable = /* @__PURE__ */ new Map();\nfunction installKeyboardcodeComparisonTable() {\n  KeyboardcodeEmenList.forEach(function (value, key) {\n    if (value.length == 5) {\n      if (value[4])\n        for (let index = 0; index < value[4].length; index++) {\n          const of_value = value[4][index];\n          KeyboardcodeComparisonTable.set(of_value.toUpperCase(), key);\n        }\n    }\n    if (typeof value[0] == \"string\") {\n      KeyboardcodeComparisonTable.set(value[0].toUpperCase(), key);\n    }\n    if (typeof value[1] == \"string\") {\n      KeyboardcodeComparisonTable.set(value[1].toUpperCase(), key);\n    }\n  });\n}\nfunction vkKey(key) {\n  if (typeof key == \"number\")\n    return key;\n  if (typeof key == \"string\") {\n    key = key.toUpperCase();\n    if (!KeyboardcodeComparisonTable.size)\n      installKeyboardcodeComparisonTable();\n    if (KeyboardcodeComparisonTable == null ? void 0 : KeyboardcodeComparisonTable.has(key)) {\n      return KeyboardcodeComparisonTable.get(key) || null;\n    }\n  }\n  return null;\n}\nvar KeyboardVKcodeEmenList = [\n  // key ,code , keyCode , VirtualKey\n  [\"0\", \"Digit0\", 48, 48],\n  [\"1\", \"Digit1\", 49, 49],\n  [\"2\", \"Digit2\", 50, 50],\n  [\"3\", \"Digit3\", 51, 51],\n  [\"4\", \"Digit4\", 52, 52],\n  [\"5\", \"Digit5\", 53, 53],\n  [\"6\", \"Digit6\", 54, 54],\n  [\"7\", \"Digit7\", 55, 55],\n  [\"8\", \"Digit8\", 56, 56],\n  [\"9\", \"Digit9\", 57, 57],\n  [\"A\", \"KeyA\", 65, 65],\n  [\"B\", \"KeyB\", 66, 66],\n  [\"C\", \"KeyC\", 67, 67],\n  [\"D\", \"KeyD\", 68, 68],\n  [\"E\", \"KeyE\", 69, 69],\n  [\"F\", \"KeyF\", 70, 70],\n  [\"G\", \"KeyG\", 71, 71],\n  [\"H\", \"KeyH\", 72, 72],\n  [\"I\", \"KeyI\", 73, 73],\n  [\"J\", \"KeyJ\", 74, 74],\n  [\"K\", \"KeyK\", 75, 75],\n  [\"L\", \"KeyL\", 76, 76],\n  [\"M\", \"KeyM\", 77, 77],\n  [\"N\", \"KeyN\", 78, 78],\n  [\"O\", \"KeyO\", 79, 79],\n  [\"P\", \"KeyP\", 80, 80],\n  [\"Q\", \"KeyQ\", 81, 81],\n  [\"R\", \"KeyR\", 82, 82],\n  [\"S\", \"KeyS\", 83, 83],\n  [\"T\", \"KeyT\", 84, 84],\n  [\"U\", \"KeyU\", 85, 85],\n  [\"V\", \"KeyV\", 86, 86],\n  [\"W\", \"KeyW\", 87, 87],\n  [\"X\", \"KeyX\", 88, 88],\n  [\"Y\", \"KeyY\", 89, 89],\n  [\"Z\", \"KeyZ\", 90, 90],\n  [\"0\", \"Numpad0\", 96, 96],\n  [\"1\", \"Numpad1\", 97, 97],\n  [\"2\", \"Numpad2\", 98, 98],\n  [\"3\", \"Numpad3\", 99, 99],\n  [\"4\", \"Numpad4\", 100, 100],\n  [\"5\", \"Numpad5\", 101, 101],\n  [\"6\", \"Numpad6\", 102, 102],\n  [\"7\", \"Numpad7\", 103, 103],\n  [\"8\", \"Numpad8\", 104, 104],\n  [\"9\", \"Numpad9\", 105, 105],\n  [\"Alt\", \"Alt\", 18, 18],\n  [\"Alt\", \"AltLeft\", 164, 164],\n  [\"Alt\", \"AltRight\", 165, 165],\n  [\"CapsLock\", \"CapsLock\", 20, 20],\n  [\"Control\", \"Control\", 17, 17, [\"ctrl\"]],\n  [\"Control\", \"ControlLeft\", 162, 162, [\"ctrl\"]],\n  [\"Control\", \"ControlRight\", 163, 163, [\"ctrl\"]],\n  [\"Win\", \"MetaLeft\", 91, 91],\n  [\"Win\", \"MetaRight\", 92, 92],\n  [\"NumLock\", \"NumLock\", 144, 144],\n  [\"ScrollLock\", null, 145, 145],\n  [\"Shift\", \"Shift\", 16, 16],\n  [\"Shift\", \"ShiftLeft\", 160, 160],\n  [\"Shift\", \"ShiftRight\", 161, 161],\n  [\"Enter\", \"Enter\", 13, 13, [\"\\r\\n\", \"\\r\", \"\\n\"]],\n  [\"Tab\", \"Tab\", 9, 9],\n  [\"Space\", \"Space\", 32, 32],\n  [\"ArrowDown\", null, 40, 40],\n  [\"ArrowLeft\", null, 37, 37],\n  [\"ArrowRight\", null, 39, 39],\n  [\"ArrowUp\", null, 38, 38],\n  [\"End\", \"End\", 35, 35],\n  [\"Home\", \"Home\", 36, 36],\n  [\"PageDown\", null, 34, 34],\n  [\"PageUp\", null, 33, 33],\n  [\"Backspace\", null, 8, 8],\n  [\"Clear\", null, 12, 12],\n  [\"Clear\", null, 254, 254],\n  [\"CrSel\", null, 247, 247],\n  [\"Delete\", null, 46, 46],\n  [\"EraseEof\", null, 249, 249],\n  [\"ExSel\", null, 248, 248],\n  [\"Insert\", null, 45, 45],\n  [\"Accept\", null, 30, 30],\n  [\"ContextMenu\", null, 93, 93],\n  [\"Escape\", null, 27, 27, [\"esc\"]],\n  [\"Execute\", null, 43, 43],\n  [\"Finish\", null, 241, 241],\n  [\"Help\", null, 47, 47],\n  [\"Pause\", null, 19, 19],\n  [\"Play\", null, 250, 250],\n  [\"Select\", null, 41, 41],\n  [\"PrintScreen\", null, 44, 44],\n  [\"Standby\", null, 95, 95],\n  [\"Alphanumeric\", null, 240, 240],\n  [\"Convert\", null, 28, 28],\n  [\"FinalMode\", null, 24, 24],\n  [\"ModeChange\", null, 31, 31],\n  [\"NonConvert\", null, 29, 29],\n  [\"Process\", null, 229, 229],\n  [\"HangulMode\", null, 21, 21],\n  [\"HanjaMode\", null, 25, 25],\n  [\"JunjaMode\", null, 23, 23],\n  [\"Hankaku\", null, 243, 243],\n  [\"Hiragana\", null, 242, 242],\n  [\"KanaMode\", null, 246, 246],\n  [\"Romaji\", null, 245, 245],\n  [\"Zenkaku\", null, 244, 244],\n  [\"F1\", null, 112, 112],\n  [\"F2\", null, 113, 113],\n  [\"F3\", null, 114, 114],\n  [\"F4\", null, 115, 115],\n  [\"F5\", null, 116, 116],\n  [\"F6\", null, 117, 117],\n  [\"F7\", null, 118, 118],\n  [\"F8\", null, 119, 119],\n  [\"F9\", null, 120, 120],\n  [\"F10\", null, 121, 121],\n  [\"F11\", null, 122, 122],\n  [\"F12\", null, 123, 123],\n  [\"F13\", null, 124, 124],\n  [\"F14\", null, 125, 125],\n  [\"F15\", null, 126, 126],\n  [\"F16\", null, 127, 127],\n  [\"F17\", null, 128, 128],\n  [\"F18\", null, 129, 129],\n  [\"F19\", null, 130, 130],\n  [\"F20\", null, 131, 131],\n  [\"MediaPlayPause\", null, 179, 179],\n  [\"MediaStop\", null, 178, 178],\n  [\"MediaTrackNext\", null, 176, 176],\n  [\"MediaTrackPrevious\", null, 177, 177],\n  [\"AudioVolumeDown\", null, 174, 174],\n  [\"AudioVolumeMute\", null, 173, 173],\n  [\"AudioVolumeUp\", null, 175, 175],\n  [\"ZoomToggle\", null, 251, 251],\n  [\"LaunchMail\", null, 180, 180],\n  [\"LaunchMediaPlayer\", null, 181, 181],\n  [\"LaunchApplication1\", null, 182, 182],\n  [\"LaunchApplication2\", null, 183, 183],\n  [\"BrowserBack\", null, 166, 166],\n  [\"BrowserFavorites\", null, 171, 171],\n  [\"BrowserForward\", null, 167, 167],\n  [\"BrowserHome\", null, 172, 172],\n  [\"BrowserRefresh\", null, 168, 168],\n  [\"BrowserSearch\", null, 170, 170],\n  [\"BrowserStop\", null, 169, 169],\n  [\".\", \"NumpadDecimal\", 110, 110],\n  [\"*\", \"NumpadMultiply\", 106, 106],\n  [\"+\", \"NumpadAdd\", 107, 107],\n  [\"/\", \"NumpadDivide\", 111, 111],\n  [\"-\", \"NumpadSubtract\", 109, 109],\n  [\"Separator\", null, 108, 108],\n  [\";\", \"Semicolon\", 186, 186],\n  [\"+\", \"Equal\", 187, 187],\n  [\",\", \"Comma\", 188, 188],\n  [\"-\", \"Minus\", 189, 189],\n  [\".\", \"Period\", 190, 190],\n  [\"/\", \"Slash\", 191, 191],\n  [\"`\", \"Backquote\", 192, 192],\n  [\"[\", \"BracketLeft\", 219, 219],\n  [\"\\\\\", \"Backslash\", 220, 220],\n  [\"]\", \"BracketLeft\", 221, 221],\n  [\"'\", \"Quote\", 222, 222],\n  [\"Win\", \"MetaLeft\", 91, 91],\n  [\"Win\", \"MetaRight\", 92, 92]\n];\nvar KeyboardcodeEmenList = (() => {\n  let data = /* @__PURE__ */ new Map();\n  for (let index = 0; index < KeyboardVKcodeEmenList.length; index++) {\n    const [VK_key2, VK_code2, VK_keyCode2, VK_VirtualKey2, VK_Nickname] = KeyboardVKcodeEmenList[index];\n    data.set(VK_VirtualKey2, KeyboardVKcodeEmenList[index]);\n  }\n  return data;\n})();\n\n// source/mian/hmc.ts\nvar path = require(\"path\");\nvar os = require(\"os\");\nvar fs = require(\"fs\");\nvar https = require(\"https\");\nvar dgram = require(\"dgram\");\nvar child_process = require(\"child_process\");\nvar net = require(\"net\");\nvar argvSplit = require_split();\nvar $_thenConsole = null;\nvar Hkey = {\n  /**用作默认用户首选设置|也作为单个用户的首选设置 */\n  HKEY_CURRENT_CONFIG: \"HKEY_CURRENT_CONFIG\",\n  /**用作默认用户首选设置|也作为单个用户的首选设置 */\n  HKEY_USERS: \"HKEY_USERS\",\n  /**是与文档类型和 OLE\\COM 相关的信息的支持键。这个键是 */\n  HKEY_CLASSES_ROOT: \"HKEY_CLASSES_ROOT\",\n  /**包含描述计算机及其配置的条目。其中包括关于处理器、系统主板、内存和已安装的软件和硬件的信息 */\n  HKEY_LOCAL_MACHINE: \"HKEY_LOCAL_MACHINE\",\n  /**管理系统当前的用户信息 */\n  HKEY_CURRENT_USER: \"HKEY_CURRENT_USER\"\n};\nvar get_native = (binPath) => {\n  function _require_bin() {\n    try {\n      if (binPath)\n        return require(binPath);\n      if (process.arch.match(/^x32|ia32$/))\n        return require(\"./bin/HMC_x86.node\");\n      if (process.arch.match(/^x64$/))\n        return require(\"./bin/HMC_x64.node\");\n    } catch (X_X) {\n    }\n    return null;\n  }\n  let Native = (process.platform == \"win32\" ? _require_bin() : null) || (() => {\n    let HMCNotPlatform = \"HMC::HMC current method only supports win32 platform\";\n    function fnBool(...args) {\n      console.error(HMCNotPlatform);\n      return false;\n    }\n    function fnVoid(...args) {\n      console.error(HMCNotPlatform);\n      return void 0;\n    }\n    function fnNull(...args) {\n      console.error(HMCNotPlatform);\n      return null;\n    }\n    function fnNum(...args) {\n      console.error(HMCNotPlatform);\n      return 0;\n    }\n    function fnStrList(...args) {\n      console.error(HMCNotPlatform);\n      return [];\n    }\n    function fnStr(...args) {\n      console.error(HMCNotPlatform);\n      return \"\";\n    }\n    function fnAnyArr(...args) {\n      console.error(HMCNotPlatform);\n      return [];\n    }\n    return {\n      _popen: fnStr,\n      popen: fnStr,\n      createMutex: fnBool,\n      getSubProcessID: fnAnyArr,\n      enumAllProcessPolling: fnVoid,\n      clearEnumAllProcessList: fnVoid,\n      getProcessParentProcessID: fnVoid,\n      enumAllProcess: fnNum,\n      _SET_HMC_DEBUG: fnBool,\n      isStartKeyboardHook: fnBool,\n      isStartHookMouse: fnBool,\n      clearEnumProcessHandle: fnVoid,\n      getProcessThreadList: fnAnyArr,\n      getMouseNextSession: fnAnyArr,\n      getKeyboardNextSession: fnAnyArr,\n      unKeyboardHook: fnVoid,\n      unHookMouse: fnVoid,\n      installKeyboardHook: fnVoid,\n      installHookMouse: fnVoid,\n      MessageError: fnVoid,\n      MessageStop: fnBool,\n      SetBlockInput: fnBool,\n      SetSystemHOOK: fnBool,\n      SetWindowInTaskbarVisible: fnBool,\n      alert: fnBool,\n      clearClipboard: fnBool,\n      closedHandle: fnVoid,\n      confirm: fnBool,\n      createDirSymlink: fnBool,\n      createHardLink: fnBool,\n      createPathRegistr: fnBool,\n      createSymlink: fnBool,\n      desc: \"HMC Connection System api\",\n      enumRegistrKey: fnStrList,\n      getAllWindows: fnAnyArr,\n      getAllWindowsHandle: fnAnyArr,\n      getBasicKeys: () => {\n        console.error(HMCNotPlatform);\n        return {\n          \"alt\": false,\n          \"ctrl\": false,\n          \"shift\": false,\n          \"win\": false\n        };\n      },\n      getClipboardFilePaths: fnStrList,\n      getClipboardText: fnStr,\n      getDetailsProcessList: fnAnyArr,\n      getDeviceCaps: () => {\n        console.error(HMCNotPlatform);\n        return {\n          \"height\": 0,\n          \"width\": 0\n        };\n      },\n      getForegroundWindow: fnNum,\n      getForegroundWindowProcessID: fnNull,\n      getHandleProcessID: fnNull,\n      getHidUsbList: fnAnyArr,\n      getMainWindow: fnNull,\n      getMetrics: () => {\n        console.error(HMCNotPlatform);\n        return { \"left\": 0, \"top\": 0, \"x\": 0, \"y\": 0 };\n      },\n      getMouseMovePoints: fnAnyArr,\n      getPointWindow: fnNull,\n      getPointWindowMain: fnNum,\n      getPointWindowName: fnStr,\n      getPointWindowProcessId: fnNum,\n      getProcessHandle: fnNull,\n      getProcessList: fnAnyArr,\n      getProcessName: fnNull,\n      getProcessidFilePath: fnNull,\n      getRegistrBuffValue: fnVoid,\n      getRegistrDword: fnNum,\n      getRegistrQword: () => {\n        console.error(HMCNotPlatform);\n        return BigInt(0);\n      },\n      getShortcutLink: () => {\n        console.error(HMCNotPlatform);\n        return { \"args\": \"\", \"cwd\": \"\", \"desc\": \"\", \"hotkey\": 0, \"icon\": \"\", \"iconIndex\": 0, \"showCmd\": 0, \"path\": \"\" };\n      },\n      getStringRegKey: fnStr,\n      getSystemIdleTime: fnNum,\n      getSystemMenu: fnBool,\n      getTrayList: fnAnyArr,\n      getUsbDevsInfo: fnStrList,\n      getWindowRect: () => {\n        console.error(HMCNotPlatform);\n        return { \"bottom\": 0, \"height\": 0, \"width\": 0, \"left\": 0, \"top\": 0, \"right\": 0, \"x\": 0, \"y\": 0 };\n      },\n      hasKeyActivate: fnBool,\n      hasProcess: fnBool,\n      hasRegistrKey: fnBool,\n      hasWindowTop: fnBool,\n      isAdmin: fnBool,\n      isEnabled: fnBool,\n      isHandle: fnBool,\n      isHandleWindowVisible: fnBool,\n      isProcess: fnBool,\n      isSystemX64: fnBool,\n      killProcess: fnBool,\n      leftClick: fnBool,\n      lookHandleCloseWindow: fnBool,\n      lookHandleGetTitle: fnNull,\n      lookHandleSetTitle: fnBool,\n      setWindowIconForExtract: fnVoid,\n      lookHandleShowWindow: fnBool,\n      messageBox: fnNum,\n      mouse: fnBool,\n      openApp: fnBool,\n      openExternal: fnBool,\n      openPath: fnBool,\n      openURL: fnBool,\n      platform: \"win32\",\n      powerControl: fnVoid,\n      removeStringRegKey: fnBool,\n      removeStringRegKeyWalk: fnBool,\n      removeStringRegValue: fnBool,\n      rightClick: fnBool,\n      setClipboardFilePaths: fnBool,\n      setClipboardText: fnBool,\n      setCursorPos: fnBool,\n      setHandleTransparent: fnBool,\n      setRegistrDword: fnBool,\n      setRegistrKey: fnBool,\n      setRegistrQword: fnBool,\n      setShortcutLink: fnBool,\n      setWindowEnabled: fnBool,\n      setWindowFocus: fnBool,\n      setWindowMode: fnBool,\n      setWindowTop: fnBool,\n      showMonitors: fnBool,\n      shutMonitors: fnBool,\n      sleep: fnBool,\n      system: fnNum,\n      systemStartTime: fnNum,\n      updateWindow: fnBool,\n      version: \"0.0.0\",\n      windowJitter: fnVoid,\n      enumChildWindows: fnAnyArr,\n      deleteFile: fnNum,\n      getClipboardSequenceNumber: fnNum,\n      enumClipboardFormats: fnAnyArr,\n      getHidUsbIdList: fnAnyArr,\n      getDeviceCapsAll: fnAnyArr,\n      isInMonitorWindow: fnBool,\n      isMouseMonitorWindow: fnBool,\n      getCurrentMonitorRect: () => {\n        console.error(HMCNotPlatform);\n        return { \"bottom\": 0, \"left\": 0, \"top\": 0, \"right\": 0 };\n      },\n      getSystemMetricsLen: fnNum,\n      getWindowStyle: fnNum,\n      getWindowClassName: fnStr,\n      formatVolumePath: fnStr,\n      getVolumeList: fnAnyArr,\n      enumProcessHandlePolling: fnVoid,\n      enumProcessHandle: fnNum,\n      getModulePathList: fnStrList,\n      getColor() {\n        return { r: 0, g: 0, b: 0, hex: \"#000000\" };\n      },\n      captureBmpToFile: fnVoid,\n      sendKeyboard: fnBool,\n      sendBasicKeys: fnBool,\n      sendKeyT2C: fnVoid,\n      sendKeyT2CSync: fnVoid\n    };\n  })();\n  return Native;\n};\nvar native = get_native();\nvar HWND = class extends Number {\n  constructor(hWnd) {\n    super(hWnd);\n    this.HWND = hWnd;\n  }\n  /**句柄 */\n  get handle() {\n    return this.HWND;\n  }\n  /**\n   * 强制关闭窗口不发送被关闭的消息给窗口\n   */\n  closed() {\n    if (!this.exists)\n      return false;\n    return native.closedHandle(this.HWND);\n  }\n  /**\n   * 向窗口发送关闭的消息\n   */\n  close() {\n    if (!this.exists)\n      return false;\n    return native.lookHandleCloseWindow(this.HWND);\n  }\n  /**\n   * 窗口位置\n   */\n  get rect() {\n    if (!this.exists)\n      return null;\n    return native.getWindowRect(this.HWND);\n  }\n  /**\n   * 窗口名称\n   */\n  get title() {\n    return native.lookHandleGetTitle(this.HWND) || \"\";\n  }\n  /**\n   * 设置窗口的标题\n   * @param Title 标题\n   * @returns\n   */\n  setTitle(Title) {\n    if (typeof Title !== \"string\" || !this.exists) {\n      return false;\n    }\n    return native.lookHandleSetTitle(this.HWND, Title);\n  }\n  /**句柄是否有效 */\n  get exists() {\n    if (!this.HWND)\n      return false;\n    return native.isHandle(this.HWND);\n  }\n  /**句柄是否有效 */\n  get isHandle() {\n    return this.exists;\n  }\n  /**\n   * 当前句柄的pid\n   */\n  get pid() {\n    if (!this.exists)\n      return 0;\n    return native.getHandleProcessID(this.HWND);\n  }\n  /**\n   * 获取主窗口的pid\n   */\n  get MianPid() {\n    if (!this.exists)\n      return 0;\n    return native.getHandleProcessID(this.MainHandle);\n  }\n  get MainHandle() {\n    return native.getMainWindow(this.HWND) || 0;\n  }\n  get className() {\n    return native.getWindowClassName(this.HWND);\n  }\n  get style() {\n    return native.getWindowStyle(this.HWND);\n  }\n  /**\n   * 判断窗口是否可见\n   * @returns\n   */\n  isVisible() {\n    if (!this.HWND)\n      return false;\n    return native.isHandleWindowVisible(this.HWND);\n  }\n  /**\n   * 结束该进程\n   * @returns\n   */\n  kill() {\n    let processid = this.MianPid;\n    if (!processid)\n      return false;\n    return native.killProcess(processid);\n  }\n  /**\n   * 隐藏窗口\n   * @returns\n   */\n  hide() {\n    if (!this.HWND)\n      return false;\n    return native.lookHandleShowWindow(this.HWND, 0);\n  }\n  /**\n   * 显示窗口\n   * @returns\n   */\n  show() {\n    if (!this.HWND)\n      return false;\n    return native.lookHandleShowWindow(this.HWND, 5);\n  }\n  /**\n   * 窗口最小化\n   * @returns\n   */\n  setMin() {\n    if (!this.HWND)\n      return false;\n    return native.lookHandleShowWindow(this.HWND, 7);\n  }\n  /**\n   * 窗口最大化\n   * @returns\n   */\n  setMax() {\n    if (!this.HWND)\n      return false;\n    return native.lookHandleShowWindow(this.HWND, 3);\n  }\n  /**\n   * 恢复最近的状态\n   * @returns\n   */\n  setRestore() {\n    if (!this.HWND)\n      return false;\n    return native.lookHandleShowWindow(this.HWND, 9);\n  }\n  /**\n   * 聚焦该窗口\n   * @returns\n   */\n  setFocus() {\n    if (!this.HWND)\n      return false;\n    return native.setWindowFocus(this.HWND);\n  }\n  /**\n   * 禁用窗口\n   * @param enabled\n   * @returns\n   */\n  setEnabled(enabled) {\n    if (!this.HWND)\n      return false;\n    return native.setWindowEnabled(this.HWND, enabled);\n  }\n  /**\n   * 是否被禁用\n   * @returns\n   */\n  isEnabled() {\n    if (!this.HWND)\n      return false;\n    return native.isEnabled(this.HWND);\n  }\n  /**\n   * 窗口抖动\n   * @returns\n   */\n  setJitter() {\n    if (!this.HWND)\n      return false;\n    return native.windowJitter(this.HWND);\n  }\n  /**\n   * 判断窗口是否被顶设\n   * @returns\n   */\n  isTop() {\n    if (!this.HWND)\n      return false;\n    return native.hasWindowTop(this.HWND);\n  }\n  /**\n   * 设置窗口顶设或者取消\n   * @returns\n   */\n  setTopOrCancel() {\n    if (!this.HWND)\n      return false;\n    return native.setWindowTop(this.HWND);\n  }\n  /**\n   * 设置窗口不透明度\n   * @param opacity 0-100 or 0.0 - 1.0\n   */\n  setOpacity(opacity) {\n    if (typeof opacity !== \"number\" || opacity > 100 || isNaN(opacity))\n      throw new Error(\n        \"fun <setOpacity> arg:<Opacity> is only allowed from 0.0 to 1.0 or  0 to 255\"\n      );\n    if (opacity < 1) {\n      return this.setTransparent(Math.trunc(255 * opacity));\n    }\n    opacity = 255 / 100 * opacity;\n    if (!isNaN(opacity)) {\n      return this.setTransparent(Math.trunc(255 * opacity));\n    }\n    return false;\n  }\n  /**\n   * 设置窗口不透明度\n   * @param opacity -1 - 255\n   */\n  setTransparent(opacity) {\n    if (opacity > -1 || opacity < 255) {\n      throw new Error(\n        \"fun <setTransparent> arg:<Opacity> is only allowed from -1 to 255\"\n      );\n    }\n    if (!this.HWND)\n      return false;\n    return native.setHandleTransparent(this.HWND, opacity);\n  }\n};\nvar HMC;\n((HMC2) => {\n  ;\n})(HMC || (HMC = {}));\nvar ref = {\n  /**\n  * 将内容格式化为文本路径\n  * @param Str\n  * @returns\n  */\n  path(Str) {\n    return path.resolve(String(Str || \"\")).replace(/([\\0\\n\\r]+)?$/, \"\\0\");\n  },\n  /**\n   * 格式化为bool\n   * @param bool\n   * @returns\n   */\n  bool(bool) {\n    return bool ? true : false;\n  },\n  /**\n   * 将内容格式化为文本\n   * @param Str\n   * @returns\n   */\n  string(Str) {\n    return String(Str || \"\");\n  },\n  /**\n   * 格式化数字为int(强制)\n   * @param Num\n   * @returns\n   */\n  int(Num) {\n    if (!Num)\n      return 0;\n    if (typeof Num == \"object\" && Num instanceof Number) {\n      Num = Num == null ? void 0 : Num.valueOf();\n    }\n    Num = Math.trunc(Num + 0);\n    if (typeof Num == \"number\" && !isNaN(Num))\n      return Num;\n    if (Num && typeof Num == \"boolean\")\n      Num = 1;\n    if (!Num && typeof Num == \"boolean\")\n      Num = 0;\n    if (Num >= Infinity) {\n      Num = 999999999999999;\n    }\n    if (Num <= -Infinity) {\n      Num = -999999999999999;\n    }\n    return Num;\n  },\n  /**\n   * 文本数组\n   * @param array \n   * @returns \n   */\n  stringArray(array) {\n    let dataList = [];\n    if (Array.isArray(array)) {\n      for (let index = 0; index < array.length; index++) {\n        const cout = array[index];\n        dataList.push(this.string(cout));\n      }\n    }\n    if (array instanceof Set) {\n      for (const cout of array) {\n        dataList.push(this.string(cout));\n      }\n    }\n    return dataList;\n  },\n  /**\n   * 文本数组\n   * @param array \n   * @returns \n   */\n  intArray(array) {\n    let dataList = [];\n    if (Array.isArray(array)) {\n      for (let index = 0; index < array.length; index++) {\n        const cout = array[index];\n        dataList.push(this.int(cout));\n      }\n    }\n    if (array instanceof Set) {\n      for (const cout of array) {\n        dataList.push(this.int(cout));\n      }\n    }\n    return dataList;\n  },\n  /**\n   * 格式化命令行内容\n   */\n  formatCmd(cmd) {\n    return argvSplit(this.string(cmd));\n  },\n  /**\n   * 将命令行内容组转为cmd文本\n   * @param argv \n   */\n  formatArgv(...argv) {\n    let argvs = [];\n    let argvsResult = [];\n    for (let index = 0; index < argv.length; index++) {\n      const cout = argv[index];\n      if (Array.isArray(cout)) {\n        for (let cout_index = 0; cout_index < cout.length; cout_index++) {\n          const cout2 = cout[cout_index];\n          argvs.push(this.string(cout2));\n        }\n        continue;\n      }\n      argvs.push(this.string(cout));\n    }\n    for (let index = 0; index < argvs.length; index++) {\n      let cout = argvs[index];\n      if (!cout)\n        continue;\n      if (cout.match(/['\"]/)) {\n        cout = cout.replace(/(\\\\)?[\"']/g, \"\\\\$0\");\n      }\n      if (cout.match(\" \")) {\n        cout = '\"'.concat(cout, '\"');\n      }\n      if (cout.match(/[\\n\\r]/)) {\n        cout = cout.replace(/(\\n|\\r|\\r\\n)/g, \"$0^\");\n      }\n      argvsResult.push(cout);\n    }\n    return argvsResult.join(\" \");\n  },\n  /**注册表根目录 */\n  HKEY: Hkey,\n  /**\n   * 拼合buff片段\n   * @param buffList \n   * @returns \n   */\n  concatBuff(buffList) {\n    let buffSize = 0;\n    for (let index = 0; index < buffList.length; index++) {\n      const buff = buffList[index];\n      buffSize = buffSize + buff.byteLength;\n    }\n    let ResponseData = Buffer.concat([...buffList], buffSize);\n    return ResponseData;\n  },\n  /**\n   * 键盘值格式化为键值\n   * @param key 键值/键\n   * @returns \n   */\n  vkKey\n};\nfunction getDefaultTitele() {\n  try {\n    return globalThis.document.title;\n  } catch (error) {\n    return native.lookHandleGetTitle(native.getProcessHandle(process.pid) || 0) || native.getProcessName(process.pid) || process.title;\n  }\n}\nfunction analysisDirectPath(Path, atkey) {\n  let directPath = [];\n  directPath.push(...Path.split(new RegExp(Object.keys(Hkey).join(\"|\"))));\n  if (directPath.length < 2) {\n    return [];\n  }\n  directPath[1] = directPath[1].replace(/[\\\\\\/]+/g, \"\\\\\");\n  if (atkey) {\n    let paths = directPath[1].split(/[\\\\]/g);\n    if (paths.length) {\n      let popData = paths.pop();\n      popData && directPath.push(popData);\n      directPath.unshift(...paths);\n    }\n  }\n  return directPath;\n}\nfunction systemChcp() {\n  let result = { code: 437, chcp: chcpList[437] };\n  return new Promise((resolve) => {\n    child_process.execFile(\"chcp\", function (err, data) {\n      if (!data || err)\n        return resolve(result);\n      let sy_Chcp = data.match(/^.+?(\\d+)[\\r\\n]+$/);\n      if (sy_Chcp && chcpList[Number(sy_Chcp[1])]) {\n        result.chcp = chcpList[Number(sy_Chcp[1])];\n        result.code = Number(sy_Chcp[1]);\n        resolve(result);\n      }\n      resolve(result);\n    });\n  });\n}\nfunction setWindowMode(HWND2, x, y, width, height) {\n  if (!ref.int(HWND2))\n    return false;\n  if (x && typeof x == \"object\") {\n    let SetWindowRect = x;\n    SetWindowRect.y = SetWindowRect.top ? SetWindowRect.top : SetWindowRect.y || 0;\n    SetWindowRect.x = SetWindowRect.right ? SetWindowRect.right : SetWindowRect.x || 0;\n    if (SetWindowRect.x)\n      x = SetWindowRect.x;\n    if (SetWindowRect.y)\n      y = SetWindowRect.y;\n    if (SetWindowRect.width)\n      width = SetWindowRect.width;\n    if (SetWindowRect.height)\n      height = SetWindowRect.height;\n  }\n  if (!x)\n    x = 0;\n  if (!y)\n    x = 0;\n  if (!width)\n    width = 0;\n  if (!height)\n    height = 0;\n  return native.setWindowMode(\n    ref.int(HWND2),\n    ref.int(x),\n    ref.int(y),\n    ref.int(width),\n    ref.int(height)\n  );\n}\nfunction has_reg_args(HKEY, Path, funName) {\n  let hasHKEY = new RegExp(\"^\".concat(Object.keys(Hkey).join(\"|\"), \"$\")).exec(HKEY);\n  if (!hasHKEY || !Path) {\n    throw new Error(\"\\n        <fun> \".concat(funName, \"  \\n        argument size 2 or 3\\n        HKEY : \").concat(Object.keys(Hkey), '\\n        Path : string\\n        key ?: string  or \"\" or undefined\\n        '));\n  }\n}\nfunction hasRegistrKey(HKEY, Path, key) {\n  if (!key)\n    key = \"\";\n  has_reg_args(HKEY, Path, \"hasRegistrKey\");\n  return native.hasRegistrKey(\n    HKEY,\n    ref.string(Path).split(/[\\\\\\/]+/g).join(\"\\\\\"),\n    ref.string(key)\n  );\n}\nfunction setRegistrQword(HKEY, Path, key, Qword) {\n  if (!key)\n    key = \"\";\n  has_reg_args(HKEY, Path, \"hasRegistrKey\");\n  if (!Qword)\n    Qword = BigInt(0);\n  return native.setRegistrQword(HKEY, ref.string(Path), ref.string(key), BigInt(Qword));\n}\nfunction setRegistrDword(HKEY, Path, key, Dword) {\n  if (!key)\n    key = \"\";\n  has_reg_args(HKEY, Path, \"hasRegistrKey\");\n  return native.setRegistrDword(HKEY, ref.string(Path), ref.string(key), ref.int(Dword));\n}\nfunction getRegistrQword(HKEY, Path, key) {\n  if (!key)\n    key = \"\";\n  has_reg_args(HKEY, Path, \"getRegistrQword\");\n  return native.getRegistrQword(\n    HKEY,\n    ref.string(Path).split(/[\\\\\\/]+/g).join(\"\\\\\"),\n    ref.string(key)\n  );\n}\nfunction getRegistrDword(HKEY, Path, key) {\n  if (!key)\n    key = \"\";\n  has_reg_args(HKEY, Path, \"getRegistrDword\");\n  return native.getRegistrDword(\n    HKEY,\n    ref.string(Path).split(/[\\\\\\/]+/g).join(\"\\\\\"),\n    ref.string(key)\n  );\n}\nfunction getRegistrBuffValue(HKEY, Path, key) {\n  if (!key)\n    key = \"\";\n  has_reg_args(HKEY, Path, \"getRegistrBuffValue\");\n  return native.getRegistrBuffValue(\n    HKEY,\n    ref.string(Path).split(/[\\\\\\/]+/g).join(\"\\\\\"),\n    ref.string(key)\n  );\n}\nfunction enumRegistrKey(HKEY, Path) {\n  has_reg_args(HKEY, Path, \"createPathRegistr\");\n  let enumKeyList = /* @__PURE__ */ new Set();\n  let NatenumKey = native.enumRegistrKey(\n    HKEY,\n    ref.string(Path).split(/[\\\\\\/]+/g).join(\"\\\\\")\n  );\n  for (let index = 0; index < NatenumKey.length; index++) {\n    const key = NatenumKey[index];\n    enumKeyList.add(key);\n  }\n  return [...enumKeyList];\n}\nfunction listRegistrPath(HKEY, Path) {\n  let enumRegistrKeys = enumRegistrKey(HKEY, Path);\n  enumRegistrKeys.unshift(\"\");\n  let data = {\n    \"\": \"\"\n  };\n  for (let i = 0; i < enumRegistrKeys.length; i++) {\n    data[enumRegistrKeys[i]] = getStringRegKey(\n      HKEY,\n      Path,\n      enumRegistrKeys[i]\n    );\n  }\n  return data;\n}\nfunction isRegistrTreeKey(HKEY, Path, key) {\n  return !!enumRegistrKey(HKEY, Path + (!key ? \"\" : \"\\\\\" + key)).length;\n}\nfunction getStringRegKey(HKEY, Path, key) {\n  if (!key)\n    key = \"\";\n  has_reg_args(HKEY, Path, \"getStringRegKey\");\n  return native.getStringRegKey(\n    HKEY,\n    ref.string(Path).split(/[\\\\\\/]+/g).join(\"\\\\\"),\n    ref.string(key)\n  );\n}\nfunction openRegKey(HKEY, Path, key) {\n  if (!key)\n    key = \"\";\n  has_reg_args(HKEY, Path, \"openRegKey\");\n  return {\n    /**\n     * 获取全路径\n     */\n    get path() {\n      return HKEY.concat(\"\\\\\", Path, \"\\\\\", key || \"\");\n    },\n    /**\n     * 设置一个值\n     * @param data 数据\n     */\n    set(data) {\n      return native.setRegistrKey(HKEY, Path, key || \"\", data);\n    },\n    /**\n     * 获取内容\n     * @returns\n     */\n    get() {\n      return native.getStringRegKey(HKEY, Path, key || \"\");\n    },\n    /**\n     * 获取该内容并将其视为二进制缓冲区\n     * @returns 二进制缓冲区\n     */\n    getBuff() {\n      return native.getRegistrBuffValue(HKEY, Path, key || \"\") || Buffer.alloc(0);\n    },\n    /**\n     * 获取该内容并将其视为数字\n     * @returns 数字\n     */\n    getNumber() {\n      return Number(native.getStringRegKey(HKEY, Path, key || \"\"));\n    },\n    /**\n     * 枚举当前路径下的键\n     * @returns 键 数组\n     */\n    keys() {\n      return enumRegistrKey(HKEY, Path);\n    },\n    /**\n     * 将当前目录转为对象\n     */\n    list() {\n      return listRegistrPath(HKEY, Path);\n    }\n  };\n}\nfunction getNumberRegKey(HKEY, Path, key) {\n  if (!key)\n    key = \"\";\n  has_reg_args(HKEY, Path, \"getNumberRegKey\");\n  return ref.int(\n    native.getStringRegKey(\n      HKEY,\n      ref.string(Path).split(/[\\\\\\/]+/g).join(\"\\\\\"),\n      ref.string(key)\n    )\n  );\n}\nfunction removeStringRegKey(HKEY, Path, key) {\n  if (!key)\n    key = \"\";\n  has_reg_args(HKEY, Path, \"removeStringRegKey\");\n  return native.removeStringRegKey(\n    HKEY,\n    ref.string(Path).split(/[\\\\\\/]+/g).join(\"\\\\\"),\n    ref.string(key)\n  );\n}\nfunction removeStringRegKeyWalk(HKEY, Path, key) {\n  if (!key) {\n    let paths = ref.string(Path).split(/[\\\\\\/]/g);\n    key = paths.pop();\n    if (!key)\n      throw new Error(\"Invalid key because it is empty\");\n    Path = paths.join(\"\\\\\");\n  }\n  has_reg_args(HKEY, Path, \"removeStringRegKeyWalk\");\n  return native.removeStringRegKeyWalk(\n    HKEY,\n    ref.string(Path).split(/[\\\\\\/]+/g).join(\"\\\\\"),\n    ref.string(key)\n  );\n}\nfunction removeStringTree(HKEY, Path, key) {\n  return removeStringRegKeyWalk(HKEY, Path, key);\n}\nfunction removeStringRegValue(HKEY, Path, key) {\n  if (!key)\n    key = \"\";\n  has_reg_args(HKEY, Path, \"removeStringRegValue\");\n  return native.removeStringRegValue(\n    HKEY,\n    ref.string(Path).split(/[\\\\\\/]/g).join(\"\\\\\"),\n    ref.string(key)\n  );\n}\nfunction setRegistrKey(HKEY, Path, key, Value) {\n  if (!key)\n    key = \"\";\n  has_reg_args(HKEY, Path, \"setRegistrKey\");\n  return native.setRegistrKey(\n    HKEY,\n    ref.string(Path).split(/[\\\\\\/]/g).join(\"\\\\\"),\n    ref.string(key),\n    ref.string(Value)\n  );\n}\nfunction createPathRegistr(HKEY, Path) {\n  has_reg_args(HKEY, Path, \"createPathRegistr\");\n  return native.createPathRegistr(\n    HKEY,\n    ref.string(Path).split(/[\\\\\\/]/g).join(\"\\\\\")\n  );\n}\nfunction system(str) {\n  return native.system(ref.string(str));\n}\nfunction freePort() {\n  return new Promise((resolve, reject) => {\n    let sock = net.createServer(function () {\n    });\n    sock.listen(0, () => {\n      var _a;\n      resolve(Number((_a = sock == null ? void 0 : sock.address()) == null ? void 0 : _a.port));\n      sock.close();\n    });\n  });\n}\nfunction getClipboardFilePaths(at) {\n  let paths = native.getClipboardFilePaths();\n  if (typeof at === \"number\") {\n    if (at < 0) {\n      return paths[paths.length + at];\n    }\n    return paths[at];\n  }\n  return paths;\n}\nfunction setClipboardFilePaths(...FilePaths) {\n  let filePaths = [];\n  for (let index = 0; index < FilePaths.length; index++) {\n    const FilePath = FilePaths[index];\n    if (typeof FilePath !== \"string\") {\n      for (let indexc = 0; indexc < FilePaths.length; indexc++) {\n        filePaths.push(ref.string(FilePaths[indexc]));\n      }\n    } else {\n      filePaths.push(ref.string(FilePath));\n    }\n  }\n  return native.setClipboardFilePaths(filePaths);\n}\nfunction getUsbDevsInfo() {\n  return native.getUsbDevsInfo();\n}\nfunction enumChildWindows(Handle) {\n  return native.enumChildWindows(ref.int(Handle));\n}\nfunction hideConsole() {\n  if (!$_thenConsole) {\n    $_thenConsole = getProcessHandle(process.pid);\n  }\n  if (!$_thenConsole)\n    return false;\n  return ($_thenConsole == null ? void 0 : $_thenConsole.hide()) || false;\n}\nfunction showConsole() {\n  if (!$_thenConsole) {\n    $_thenConsole = getProcessHandle(process.pid);\n  }\n  if (!$_thenConsole)\n    return false;\n  return ($_thenConsole == null ? void 0 : $_thenConsole.show()) || false;\n}\nfunction getConsoleHandle() {\n  if (!$_thenConsole) {\n    $_thenConsole = getProcessHandle(process.pid);\n  }\n  return $_thenConsole;\n}\nfunction deleteFile(Path, Recycle, isShow) {\n  return native.deleteFile(\n    ref.path(Path),\n    typeof Recycle == \"boolean\" ? ref.bool(Recycle) : true,\n    typeof isShow == \"boolean\" ? ref.bool(isShow) : false\n  );\n}\nvar trash = deleteFile;\nfunction getClipboardSequenceNumber() {\n  return native.getClipboardSequenceNumber();\n}\nfunction watchClipboard(CallBack, nextAwaitMs) {\n  let NextAwaitMs = nextAwaitMs || 150;\n  let Next = true;\n  let oidClipboardSequenceNumber = getClipboardSequenceNumber();\n  (async function () {\n    while (Next) {\n      await Sleep(NextAwaitMs);\n      let clipboardSequenceNumber = getClipboardSequenceNumber();\n      if (oidClipboardSequenceNumber !== clipboardSequenceNumber) {\n        if (CallBack)\n          CallBack();\n      }\n      oidClipboardSequenceNumber = clipboardSequenceNumber;\n    }\n  })();\n  return {\n    /**\n     * 取消继续监听\n     */\n    unwatcher() {\n      Next = false;\n    },\n    /**\n     * 每次判断内容变化用时 默认 `150` ms\n     * @param nextAwaitMs \n     */\n    setNextAwaitMs(nextAwaitMs2) {\n      NextAwaitMs = ref.int(nextAwaitMs2) || 150;\n    }\n  };\n}\nfunction watchUSB(CallBack, nextAwaitMs, watchType) {\n  let NextAwaitMs = nextAwaitMs || 800;\n  let Next = true;\n  let OID_ID_LIST = /* @__PURE__ */ new Set();\n  let start = true;\n  if (typeof watchType == \"string\")\n    watchType = [watchType];\n  (async function () {\n    while (Next) {\n      await Sleep(NextAwaitMs);\n      let GET_ID_List = new Set(watchType ? [\n        ...watchType.includes(\"hub\") ? native.getHidUsbIdList() : [],\n        ...watchType.includes(\"drive\") ? native.getUsbDevsInfo() : []\n      ] : [...native.getHidUsbIdList(), ...native.getUsbDevsInfo()]);\n      if (start) {\n        for (const NEW_ID of GET_ID_List) {\n          OID_ID_LIST.add(NEW_ID);\n          CallBack && CallBack(\"start\", NEW_ID);\n        }\n        start = false;\n      }\n      let GET_ID_List_NEW = [...GET_ID_List];\n      for (const OID_ID of OID_ID_LIST) {\n        if (!GET_ID_List.has(OID_ID)) {\n          CallBack && CallBack(\"remove\", OID_ID);\n        }\n      }\n      for (const NEW_ID of GET_ID_List) {\n        if (!OID_ID_LIST.has(NEW_ID)) {\n          CallBack && CallBack(\"add\", NEW_ID);\n        }\n      }\n      OID_ID_LIST.clear();\n      for (let index = 0; index < GET_ID_List_NEW.length; index++) {\n        const GET_ID = GET_ID_List_NEW[index];\n        OID_ID_LIST.add(GET_ID);\n      }\n    }\n  })();\n  return {\n    get idList() {\n      return OID_ID_LIST;\n    },\n    /**\n     * 取消继续监听\n     */\n    unwatcher() {\n      Next = false;\n    },\n    /**\n     * 每次判断内容变化用时 默认 `800` ms\n     * @param nextAwaitMs \n     */\n    setNextAwaitMs(nextAwaitMs2) {\n      NextAwaitMs = ref.int(nextAwaitMs2) || 800;\n    }\n  };\n}\nfunction getDeviceCapsAll() {\n  return native.getDeviceCapsAll();\n}\nfunction isInMonitorWindow(Handle) {\n  return native.isInMonitorWindow(ref.int(Handle));\n}\nfunction isMouseMonitorWindow(Handle) {\n  return native.isMouseMonitorWindow(ref.int(Handle));\n}\nfunction getCurrentMonitorRect() {\n  return native.getCurrentMonitorRect();\n}\nfunction getSystemMetricsLen() {\n  return native.getSystemMetricsLen();\n}\nfunction alert(Message, Title) {\n  return native.alert(\n    Message,\n    typeof Title != \"string\" ? getDefaultTitele() : Title\n  );\n}\nfunction confirm(Message, Title) {\n  return native.confirm(\n    Message,\n    typeof Title != \"string\" ? getDefaultTitele() : Title\n  );\n}\nfunction MessageStop(Message, Title) {\n  return native.MessageStop(\n    Message,\n    typeof Title != \"string\" ? getDefaultTitele() : Title\n  );\n}\nfunction MessageError(Message, Title) {\n  return native.MessageError(\n    Message,\n    typeof Title != \"string\" ? getDefaultTitele() : Title\n  );\n}\nfunction getAllWindowsHandle(isWindows) {\n  let data = [];\n  let AllWindowsHandle = native.getAllWindowsHandle(isWindows || false);\n  for (let index = 0; index < AllWindowsHandle.length; index++) {\n    const element = AllWindowsHandle[index];\n    data.push(new HWND(element));\n  }\n  return data;\n}\nfunction processWatchdog(ProcessID, callback, awaitMs) {\n  let quit = false;\n  if (!callback) {\n    let Prom = new Promise(\n      async (resolve, reject) => {\n        while (true) {\n          if (quit)\n            break;\n          await Sleep(awaitMs || 500);\n          if (!hasProcess(ref.int(ProcessID))) {\n            resolve(void 0);\n            break;\n          }\n        }\n      }\n    );\n    Prom.quit = function () {\n      quit = true;\n    };\n    return Prom;\n  }\n  (async () => {\n    while (true) {\n      await Sleep(awaitMs || 500);\n      if (!hasProcess(ref.int(ProcessID))) {\n        typeof callback == \"function\" && callback();\n        break;\n      }\n    }\n  })();\n  return {\n    quit: function () {\n      quit = true;\n    }\n  };\n}\nfunction WatchWindowPoint(callback, awaitMs) {\n  let quit = false;\n  let oidPoint = native.getPointWindow() || 0;\n  (async () => {\n    if (typeof callback !== \"function\")\n      return;\n    while (true) {\n      if (quit)\n        return;\n      let newPoint = native.getPointWindow() || 0;\n      if (newPoint) {\n        if (newPoint != oidPoint) {\n          if (callback) {\n            callback(\n              ref.int(newPoint),\n              ref.int(oidPoint) || 0,\n              new HWND(ref.int(newPoint))\n            );\n            oidPoint = newPoint;\n          }\n        }\n      }\n      await Sleep(awaitMs || 350);\n    }\n  })();\n  return {\n    /**结束监听 */\n    quit: function () {\n      quit = true;\n    },\n    /**设置每次延迟事件 */\n    setAwaitMs(ms) {\n      awaitMs = ms;\n    }\n  };\n}\nfunction WatchWindowForeground(callback, awaitMs) {\n  let quit = false;\n  let oidForeg = getForegroundWindow();\n  (async () => {\n    if (typeof callback !== \"function\")\n      return;\n    while (true) {\n      if (quit)\n        return;\n      let newForeg = getForegroundWindow();\n      if (newForeg) {\n        if (ref.int(newForeg) != ref.int(oidForeg)) {\n          if (callback) {\n            callback(\n              ref.int(newForeg),\n              ref.int(oidForeg) || 0,\n              new HWND(ref.int(newForeg))\n            );\n            oidForeg = newForeg;\n          }\n        }\n      }\n      await Sleep(awaitMs || 350);\n    }\n  })();\n  return {\n    /**结束监听 */\n    quit: function () {\n      quit = true;\n    },\n    /**设置每次延迟事件 */\n    setAwaitMs(ms) {\n      awaitMs = ms;\n    }\n  };\n}\nfunction openApp(AppPath, Command, cwd, hide, UAC) {\n  return native.openApp(\n    ref.string(AppPath),\n    ref.string(\n      Array.isArray(Command) ? ref.formatArgv(Command) : Command\n    ) || \"\",\n    ref.string(cwd || path.parse(AppPath || \"\").dir || process.cwd()),\n    ref.bool(hide || false),\n    ref.bool(UAC || false)\n  );\n}\nfunction getProcessNameList(...Name) {\n  let resultList = [];\n  let ProcessList = native.getProcessList();\n  for (let index = 0; index < ProcessList.length; index++) {\n    const Process2 = ProcessList[index];\n    const { pid, name } = Process2;\n    for (let NextNameIndex = 0; NextNameIndex < Name.length; NextNameIndex++) {\n      const NextName = Name[NextNameIndex];\n      if (typeof NextName === \"string\") {\n        if (Process2.name == NextName) {\n          resultList.push({ pid, name });\n        }\n      }\n      if (NextName instanceof RegExp && NextName.test(name)) {\n        resultList.push({ pid, name });\n      }\n    }\n  }\n  return resultList;\n}\nfunction getDetailsProcessNameList(...Name) {\n  let resultList = [];\n  let ProcessList = native.getDetailsProcessList();\n  for (let index = 0; index < ProcessList.length; index++) {\n    const Process2 = ProcessList[index];\n    const { pid, name, path: path2 } = Process2;\n    for (let NextNameIndex = 0; NextNameIndex < Name.length; NextNameIndex++) {\n      const NextName = Name[NextNameIndex];\n      if (typeof NextName === \"string\") {\n        if (Process2.name == NextName) {\n          resultList.push({ pid, name, path: path2 });\n        }\n      }\n      if (NextName instanceof RegExp && NextName.test(name)) {\n        resultList.push({ pid, name, path: path2 });\n      }\n    }\n  }\n  return resultList;\n}\nfunction killProcessName(...Name) {\n  let resultList = [];\n  let ProcessList = getProcessList();\n  for (let index = 0; index < ProcessList.length; index++) {\n    const Process2 = ProcessList[index];\n    const { pid, name } = Process2;\n    for (let NextNameIndex = 0; NextNameIndex < Name.length; NextNameIndex++) {\n      const NextName = Name[NextNameIndex];\n      if (typeof NextName === \"string\") {\n        if (Process2.name == NextName) {\n          killProcess(Process2.pid);\n          resultList.push({\n            pid,\n            name,\n            get kill() {\n              return hasProcess(pid);\n            }\n          });\n        }\n      }\n      if (NextName instanceof RegExp && NextName.test(name)) {\n        killProcess(Process2.pid);\n        resultList.push({\n          pid,\n          name,\n          get kill() {\n            return hasProcess(pid);\n          }\n        });\n      }\n    }\n  }\n  return resultList;\n}\nfunction getForegroundWindow() {\n  let Handle = native.getForegroundWindow();\n  return Handle ? new HWND(Handle) : null;\n}\nfunction getMainWindow(Handle) {\n  let Handles = native.getMainWindow(ref.int(Handle));\n  return Handles ? new HWND(Handles) : null;\n}\nfunction getPointWindow() {\n  let Handle = native.getPointWindow();\n  return Handle ? new HWND(Handle) : null;\n}\nfunction getPointWindowMain() {\n  let Handle = native.getPointWindowMain();\n  return Handle ? new HWND(Handle) : null;\n}\nfunction getProcessHandle(ProcessID) {\n  let Handles = native.getProcessHandle(ref.int(ProcessID));\n  return Handles ? new HWND(Handles) : null;\n}\nfunction SetBlockInput(Block) {\n  return native.SetBlockInput(ref.bool(Block));\n}\nfunction SetWindowInTaskbarVisible(Handle, Visible) {\n  return native.SetWindowInTaskbarVisible(\n    ref.int(Handle),\n    ref.bool(Visible)\n  );\n}\nfunction getHandleProcessID(Handle) {\n  return native.getHandleProcessID(ref.int(Handle));\n}\nfunction getWindowRect(Handle) {\n  return native.getWindowRect(ref.int(Handle));\n}\nfunction isEnabled(Handle) {\n  return native.isEnabled(ref.int(Handle));\n}\nfunction isHandle(Handle) {\n  return native.isHandle(ref.int(Handle));\n}\nfunction isHandleWindowVisible(Handle) {\n  return native.isHandleWindowVisible(ref.int(Handle));\n}\nfunction lookHandleCloseWindow(Handle) {\n  return native.lookHandleCloseWindow(ref.int(Handle));\n}\nfunction lookHandleGetTitle(Handle) {\n  return native.lookHandleGetTitle(ref.int(Handle));\n}\nfunction lookHandleSetTitle(Handle, title) {\n  return native.lookHandleSetTitle(\n    ref.int(Handle),\n    ref.string(title)\n  );\n}\nvar setShowWindow = lookHandleShowWindow;\nvar setCloseWindow = lookHandleCloseWindow;\nvar getWindowTitle = lookHandleGetTitle;\nvar setWindowTitle = lookHandleSetTitle;\nfunction lookHandleShowWindow(Handle, SetShowType) {\n  return native.lookHandleShowWindow(\n    ref.int(Handle),\n    ref.int(\n      typeof SetShowType == \"number\" ? ref.int(SetShowType) : 5\n    )\n  );\n}\nfunction setHandleTransparent(Handle, Transparent) {\n  return native.setHandleTransparent(\n    ref.int(Handle),\n    ref.int(Transparent || 255)\n  );\n}\nfunction setWindowEnabled(Handle, Enabled) {\n  return native.setWindowEnabled(\n    ref.int(Handle),\n    ref.bool(Enabled)\n  );\n}\nfunction setWindowFocus(Handle) {\n  return native.setWindowFocus(ref.int(Handle));\n}\nfunction setWindowTop(Handle) {\n  return native.setWindowTop(ref.int(Handle));\n}\nfunction updateWindow(Handle) {\n  return native.updateWindow(ref.int(Handle));\n}\nfunction windowJitter(Handle) {\n  return native.windowJitter(ref.int(Handle));\n}\nfunction hasWindowTop(Handle) {\n  return native.hasWindowTop(ref.int(Handle));\n}\nfunction closedHandle(Handle) {\n  return native.closedHandle(ref.int(Handle));\n}\nfunction getHidUsbList() {\n  return native.getHidUsbList();\n}\nfunction getMetrics() {\n  return native.getMetrics();\n}\nfunction getMouseMovePoints() {\n  return native.getMouseMovePoints();\n}\nfunction getDeviceCaps() {\n  return native.getDeviceCaps();\n}\nfunction SetSystemHOOK(HOOK) {\n  return native.SetSystemHOOK(ref.bool(HOOK));\n}\nfunction getBasicKeys() {\n  return native.getBasicKeys();\n}\nfunction getClipboardText() {\n  return native.getClipboardText();\n}\nfunction setClipboardText(text) {\n  return native.setClipboardText(ref.string(text));\n}\nfunction clearClipboard() {\n  return native.clearClipboard();\n}\nfunction getDetailsProcessList() {\n  return native.getDetailsProcessList();\n}\nfunction getProcessList() {\n  return native.getProcessList();\n}\nfunction getForegroundWindowProcessID() {\n  return native.getForegroundWindowProcessID();\n}\nfunction getPointWindowName() {\n  return native.getPointWindowName();\n}\nfunction getPointWindowProcessId() {\n  return native.getPointWindowProcessId();\n}\nfunction getProcessName(ProcessID) {\n  return native.getProcessName(ref.int(ProcessID));\n}\nfunction getProcessidFilePath(ProcessID) {\n  return native.getProcessidFilePath(ref.int(ProcessID));\n}\nfunction getShortcutLink(LnkPath) {\n  return native.getShortcutLink(ref.string(LnkPath));\n}\nfunction getSystemIdleTime() {\n  return native.getSystemIdleTime();\n}\nfunction getSystemMenu(Handle, boolean) {\n  return native.getSystemMenu(ref.int(Handle), ref.bool(boolean));\n}\nfunction getTrayList() {\n  return native.getTrayList();\n}\nfunction hasKeyActivate(KeysEvent) {\n  return native.hasKeyActivate(ref.int(KeysEvent));\n}\nfunction hasProcess(...ProcessMatch) {\n  if (ProcessMatch.length == 1) {\n    return native.isProcess(ref.int(ProcessMatch[0]));\n  }\n  let _ProcessMatch = [];\n  let isString = false;\n  for (let index = 0; index < ProcessMatch.length; index++) {\n    const ProcessID = ProcessMatch[index];\n    if (Array.isArray(ProcessID)) {\n      for (let index2 = 0; index2 < ProcessID.length; index2++) {\n        if (typeof ProcessID[index2] == \"string\")\n          isString = true;\n        _ProcessMatch.push(ProcessID[index2]);\n      }\n    }\n    if (typeof ProcessID == \"string\") {\n      isString = true;\n      _ProcessMatch.push(ProcessID);\n    }\n    if (typeof ProcessID == \"number\")\n      _ProcessMatch.push(ProcessID);\n  }\n  let ProcessList = isString ? getProcessList() : [];\n  for (let index = 0; index < _ProcessMatch.length; index++) {\n    if (!isString) {\n      if (native.isProcess(ref.int(_ProcessMatch[index])))\n        return true;\n    }\n    for (let index2 = 0; index2 < ProcessList.length; index2++) {\n      const elp = ProcessList[index2];\n      if (elp.name === _ProcessMatch[index2] || elp.pid === _ProcessMatch[index2])\n        return true;\n    }\n  }\n  return false;\n}\nfunction isAdmin() {\n  return native.isAdmin();\n}\nfunction isProcess(ProcessID) {\n  return native.isProcess(ref.int(ProcessID));\n}\nfunction isSystemX64() {\n  return native.isSystemX64();\n}\nfunction killProcess(ProcessID) {\n  if (typeof ProcessID == \"string\" || typeof ProcessID == \"object\") {\n    return killProcessName(ProcessID);\n  }\n  return native.killProcess(ref.int(ProcessID));\n}\nfunction leftClick(ms) {\n  return native.leftClick(ms);\n}\nfunction messageBox(message, title, MB_UINT) {\n  return native.messageBox(ref.string(message), ref.string(title), ref.string(MB_UINT));\n}\nfunction mouse(mouse_event, ms) {\n  if (typeof mouse_event == \"number\") {\n    mouse_event = ref.int(mouse_event);\n  } else {\n    mouse_event = ref.string(mouse_event);\n  }\n  return native.mouse.apply(void 0, ms ? [mouse_event] : [mouse_event, ms]);\n}\nfunction openExternal(Path) {\n  return native.openExternal(Path);\n}\nfunction openPath(Path) {\n  return native.openPath(Path);\n}\nfunction openURL(URL) {\n  return native.openURL(ref.string(URL));\n}\nvar powerControl = (() => {\n  function _PowerControl(Set2) {\n    native.powerControl(Set2);\n  }\n  _PowerControl[1001] = () => {\n    native.powerControl(1001);\n  };\n  _PowerControl[1002] = () => {\n    native.powerControl(1002);\n  };\n  _PowerControl[1003] = () => {\n    native.powerControl(1003);\n  };\n  _PowerControl[1005] = () => {\n    native.powerControl(1005);\n  };\n  _PowerControl.shutDown = () => {\n    native.powerControl(1001);\n  };\n  _PowerControl.restart = () => {\n    native.powerControl(1002);\n  };\n  _PowerControl.cancellation = () => {\n    native.powerControl(1003);\n  };\n  _PowerControl.lock = () => {\n    native.powerControl(1005);\n  };\n  return _PowerControl;\n})();\nfunction rightClick(ms) {\n  return native.rightClick(ms);\n}\nfunction setCursorPos(x, y) {\n  return native.setCursorPos(ref.int(x), ref.int(y));\n}\nfunction setShortcutLink(...args) {\n  if (args.length < 2)\n    throw new Error(\"not LnkPath and FilePath arguments\");\n  args[0] = ref.string(args[0] || \"\");\n  args[1] = ref.string(args[1] || \"\");\n  args[2] = ref.string(args[2] || \"\");\n  args[3] = ref.string(args[3] || \"\");\n  if (Array.isArray(args[4])) {\n    args[4] = ref.formatArgv(args[4]);\n  }\n  args[4] = ref.string(args[4] || \"\");\n  if (args.length > 5) {\n    args[5] = ref.int(args[5] || 0);\n  }\n  if (args.length > 6) {\n    args[6] = ref.string(args[6] || \"\");\n  }\n  if (args.length > 7) {\n    args[7] = ref.int(args[7] || 0);\n  }\n  return native.setShortcutLink(...args);\n}\nfunction createSymlink(LinkPath, sourcePath) {\n  return native.createSymlink(ref.string(LinkPath), ref.string(sourcePath));\n}\nfunction createDirSymlink(LinkPath, sourcePath) {\n  return native.createSymlink(ref.string(LinkPath), ref.string(sourcePath));\n}\nfunction createHardLink(LinkPath, sourcePath) {\n  return native.createSymlink(ref.string(LinkPath), ref.string(sourcePath));\n}\nfunction showMonitors(show) {\n  if (typeof show == \"boolean\") {\n    return show ? native.showMonitors() : native.shutMonitors();\n  }\n  return native.showMonitors();\n}\nfunction shutMonitors(show) {\n  if (typeof show == \"boolean\") {\n    return show ? native.showMonitors() : native.shutMonitors();\n  }\n  return native.shutMonitors();\n}\nfunction sleep(awaitTime) {\n  return native.sleep(ref.int(awaitTime));\n}\nasync function Sleep(awaitTime, Sync) {\n  if (Sync) {\n    return sleep(ref.int(awaitTime));\n  }\n  return new Promise(\n    (resolve) => setTimeout(resolve, ref.int(awaitTime))\n  );\n}\nfunction systemStartTime() {\n  return native.systemStartTime();\n}\nfunction getAllWindows(isWindows) {\n  class WINDOWS_INFO {\n    constructor(handle) {\n      this.handle = handle;\n    }\n    get rect() {\n      if (!this._rect)\n        this._rect = native.getWindowRect(this.handle);\n      return this._rect;\n    }\n    get className() {\n      if (typeof this._className == \"undefined\")\n        this._className = native.getWindowClassName(this.handle);\n      return this._className;\n    }\n    get style() {\n      if (typeof this._style == \"undefined\")\n        this._style = native.getWindowStyle(this.handle);\n      return this._style;\n    }\n    get title() {\n      if (typeof this._title == \"undefined\")\n        this._title = native.lookHandleGetTitle(this.handle);\n      return this._title;\n    }\n  }\n  let AllWindowsHandle = native.getAllWindowsHandle(isWindows === false ? false : true);\n  let AllWindows = [];\n  for (let index = 0; index < AllWindowsHandle.length; index++) {\n    const handle = AllWindowsHandle[index];\n    AllWindows.push(new WINDOWS_INFO(handle));\n  }\n  return AllWindows;\n}\nfunction getWindowClassName(Handle) {\n  return native.getWindowClassName(ref.int(Handle));\n}\nfunction getWindowStyle(Handle) {\n  return native.getWindowStyle(ref.int(Handle));\n}\nfunction GetWebView2Info(Has) {\n  const INFO = {\n    version: \"\",\n    name: \"\",\n    location: \"\"\n  };\n  const { HKEY_LOCAL_MACHINE, HKEY_CURRENT_USER } = Hkey;\n  let WebView2IDKEY = \"{F3017226-FE2A-4295-8BDF-00C3A9A7E4C5}\";\n  let Path_64bit_LOCAL = [HKEY_LOCAL_MACHINE, \"SOFTWARE\\\\WOW6432Node\\\\Microsoft\\\\EdgeUpdate\\\\Clients\"];\n  let Path_64bit_USER = [HKEY_CURRENT_USER, \"SOFTWARE\\\\Microsoft\\\\EdgeUpdate\\\\Clients\"];\n  let Path_32bit_LOCAL = [HKEY_LOCAL_MACHINE, \"SOFTWARE\\\\Microsoft\\\\EdgeUpdate\\\\Clients\"];\n  let Path_32bit_USER = [HKEY_CURRENT_USER, \"Software\\\\Microsoft\\\\EdgeUpdate\\\\Clients\"];\n  let ForEachKey = [Path_64bit_LOCAL, Path_64bit_USER, Path_32bit_LOCAL, Path_32bit_USER];\n  for (let index = 0; index < ForEachKey.length; index++) {\n    const KEY_PATH = ForEachKey[index];\n    if (registr.hasRegistrKey(...KEY_PATH, WebView2IDKEY)) {\n      if (Has)\n        return true;\n    }\n    const [Hkey2, Path] = KEY_PATH;\n    INFO.location = registr.getStringRegKey(Hkey2, Path.concat(\"\\\\\", WebView2IDKEY), \"location\");\n    INFO.name = registr.getStringRegKey(Hkey2, Path.concat(\"\\\\\", WebView2IDKEY), \"name\");\n    INFO.version = registr.getStringRegKey(Hkey2, Path.concat(\"\\\\\", WebView2IDKEY), \"pv\");\n    break;\n  }\n  return INFO;\n}\nfunction getWebView2Info() {\n  return GetWebView2Info();\n}\nasync function WebView2OnlineInstall() {\n  const webView2URL = \"https://go.microsoft.com/fwlink/p/?LinkId=2124703\";\n  const webView2Path = path.join(\"MicrosoftEdgeWebview2Setup.exe\");\n  const webView2InstallCommand = [\"/silent\", \"/install\"];\n  return new Promise((resolve, reject) => {\n    const buffList = [];\n    https.get(webView2URL, (res) => {\n      if (res.statusCode !== 200) {\n        reject(new Error(\"Install  WebView2 failure statusCode: \".concat(res.statusCode || 404)));\n        return;\n      }\n      res.on(\"data\", (data) => {\n        buffList.push(data);\n      });\n      res.once(\"error\", (err) => {\n        reject(err);\n      });\n      res.on(\"end\", () => {\n        const buff = ref.concatBuff(buffList);\n        buffList.length = 0;\n        fs.promises.writeFile(webView2Path, buff).then(() => {\n          const spawn = child_process.spawn(webView2Path, webView2InstallCommand, { \"windowsHide\": true });\n          spawn.on(\"error\", function () {\n            reject(new Error(\"Install  WebView2 failure Installation process creation failed\"));\n            spawn.kill();\n          });\n          spawn.once(\"exit\", function () {\n            resolve(void 0);\n          });\n        }).catch((err) => {\n          reject(new Error(\"Install  WebView2 failure Update file cannot be written\"));\n        });\n      });\n    });\n  });\n}\nfunction hasWebView2() {\n  return GetWebView2Info(true);\n}\nfunction hasPortTCP(port, callBack) {\n  let resolve = null;\n  let prom;\n  let sock = net.createServer(function () {\n  });\n  sock.listen(port);\n  if (typeof callBack == \"function\") {\n    resolve = callBack;\n  } else {\n    prom = new Promise((Prom_resolve) => {\n      resolve = Prom_resolve;\n    });\n  }\n  sock.on(\"error\", function (err) {\n    resolve && resolve(true);\n    sock.close();\n  });\n  sock.on(\"listening\", function () {\n    resolve && resolve(false);\n    sock.close();\n  });\n  if (typeof callBack !== \"function\") {\n    return prom;\n  }\n}\nvar _KeyboardcodeEmenList = KeyboardcodeEmenList;\nvar _KeyboardcodeComparisonTable = KeyboardcodeComparisonTable;\nfunction hasPortUDP(port, callBack) {\n  let resolve = null;\n  let prom;\n  let udp4 = dgram.createSocket(\"udp4\");\n  udp4.bind(port);\n  if (typeof callBack == \"function\") {\n    resolve = callBack;\n  } else {\n    prom = new Promise((Prom_resolve) => {\n      resolve = Prom_resolve;\n    });\n  }\n  udp4.on(\"error\", function (err) {\n    resolve && resolve(true);\n    udp4.close();\n  });\n  udp4.on(\"listening\", function () {\n    resolve && resolve(false);\n    udp4.close();\n  });\n  if (typeof callBack !== \"function\") {\n    return prom;\n  }\n}\nfunction formatVolumePath(VolumePath) {\n  return native.formatVolumePath(ref.string(VolumePath));\n}\nfunction getVolumeList() {\n  return native.getVolumeList();\n}\nfunction getModulePathList(ProcessID) {\n  return native.getModulePathList(ref.int(ProcessID));\n}\nfunction enumProcessHandle(ProcessID, CallBack) {\n  let enumID = native.enumProcessHandle(ref.int(ProcessID));\n  let next = true;\n  let enumProcessHandleList = [];\n  if (typeof enumID != \"number\")\n    throw new Error(\"No enumerated id to query unknown error\");\n  if (typeof CallBack == \"function\") {\n    ;\n    (async () => {\n      while (next) {\n        await Sleep(50);\n        let data = native.enumProcessHandlePolling(enumID);\n        if (data) {\n          for (let index = 0; index < data.length; index++) {\n            const enumProcessHandle2 = data[index];\n            if (!enumProcessHandle2)\n              continue;\n            if (enumProcessHandle2.type == \"hmc::endl::\") {\n              return;\n            }\n            CallBack(enumProcessHandle2);\n          }\n        }\n      }\n    })();\n    return;\n  }\n  return new Promise(async (resolve, reject) => {\n    while (next) {\n      await Sleep(50);\n      let data = native.enumProcessHandlePolling(enumID);\n      if (data) {\n        for (let index = 0; index < data.length; index++) {\n          const enumProcessHandle2 = data[index];\n          if (!enumProcessHandle2)\n            continue;\n          if (enumProcessHandle2.type == \"hmc::endl::\") {\n            return resolve(enumProcessHandleList);\n          }\n          enumProcessHandleList.push(enumProcessHandle2);\n        }\n      }\n    }\n    resolve(enumProcessHandleList);\n  });\n}\nfunction getProcessThreadList(ProcessID, returnDetail) {\n  const _returnDetail = returnDetail ? true : false;\n  if (_returnDetail)\n    return native.getProcessThreadList(ref.int(ProcessID), true) || [];\n  return native.getProcessThreadList(ref.int(ProcessID)) || [];\n}\nfunction getSubProcessID(ProcessID) {\n  return native.getSubProcessID(ref.int(ProcessID)) || [];\n}\nfunction getProcessParentProcessID(ProcessID) {\n  return native.getProcessParentProcessID(ref.int(ProcessID)) || null;\n}\nfunction enumAllProcessHandle(CallBack) {\n  let enumID = native.enumAllProcess();\n  let next = true;\n  let PROCESSENTRYLIST = [];\n  if (typeof enumID != \"number\")\n    throw new Error(\"No enumerated id to query unknown error\");\n  if (typeof CallBack == \"function\") {\n    ;\n    (async () => {\n      while (next) {\n        await Sleep(15);\n        let data = native.enumAllProcessPolling(enumID);\n        if (data) {\n          for (let index = 0; index < data.length; index++) {\n            const PROCESSENTRY = data[index];\n            if (!PROCESSENTRY)\n              continue;\n            if (PROCESSENTRY.szExeFile == \"HMC::endl::\") {\n              return;\n            }\n            CallBack(PROCESSENTRY);\n          }\n        }\n      }\n    })();\n    return;\n  }\n  return new Promise(async (resolve, reject) => {\n    while (next) {\n      await Sleep(50);\n      let data = native.enumAllProcessPolling(enumID);\n      if (data) {\n        for (let index = 0; index < data.length; index++) {\n          const PROCESSENTRY = data[index];\n          if (!PROCESSENTRY)\n            continue;\n          if (PROCESSENTRY.szExeFile == \"HMC::endl::\") {\n            return resolve(PROCESSENTRYLIST);\n          }\n          PROCESSENTRYLIST.push(PROCESSENTRY);\n        }\n      }\n    }\n    resolve(PROCESSENTRYLIST);\n  });\n}\nvar version = native.version;\nvar desc = native.desc;\nvar platform = native.platform;\nvar Window = {\n  isInMonitor: isInMonitorWindow,\n  isMouseMonitor: isMouseMonitorWindow,\n  HWND,\n  setMode: setWindowMode,\n  getAllWindows,\n  getAllHandle: getAllWindowsHandle,\n  watchPoint: WatchWindowPoint,\n  watchtFocus: WatchWindowForeground,\n  getFocus: getForegroundWindow,\n  getMain: getMainWindow,\n  getPoint: getPointWindow,\n  getProcessHandle,\n  getPointMain: getPointWindowMain,\n  setTaskbarVisible: SetWindowInTaskbarVisible,\n  getProcessID: getHandleProcessID,\n  getRect: getWindowRect,\n  isEnabled,\n  isHandle,\n  hasHandle: isHandle,\n  isVisible: isHandleWindowVisible,\n  close: lookHandleCloseWindow,\n  getTitle: lookHandleGetTitle,\n  setTitle: lookHandleSetTitle,\n  setShowWindow: lookHandleShowWindow,\n  setTransparent: setHandleTransparent,\n  setEnabled: setWindowEnabled,\n  setFocus: setWindowFocus,\n  setTop: setWindowTop,\n  update: updateWindow,\n  jitter: windowJitter,\n  hasTop: hasWindowTop,\n  closed: closedHandle,\n  getFocusProcessID: getForegroundWindowProcessID,\n  getPointName: getPointWindowName,\n  getPointProcessId: getPointWindowProcessId,\n  enumChild: enumChildWindows,\n  console: {\n    hide: hideConsole,\n    show: showConsole,\n    get: getConsoleHandle,\n    blockInput: SetBlockInput\n  },\n  getStyle: getWindowStyle,\n  getClassName: getWindowClassName\n};\nvar Watch = {\n  clipboard: watchClipboard,\n  usb: watchUSB,\n  windowFocus: WatchWindowForeground,\n  windowPoint: WatchWindowPoint,\n  process: processWatchdog\n};\nvar Clipboard = {\n  clear: clearClipboard,\n  readText: getClipboardText,\n  readFilePaths: getClipboardFilePaths,\n  writeText: setClipboardText,\n  writeFilePaths: setClipboardFilePaths,\n  sequence: getClipboardSequenceNumber,\n  watch: watchClipboard\n};\nvar MousePoint = class {\n  constructor(str) {\n    const data = str.split(\"|\");\n    this.x = Number(data[0]);\n    this.y = Number(data[1]);\n    this.isDown = Number(data[2]) ? true : false;\n  }\n  /**\n   * 鼠标左键按下\n   */\n  get isLeft() {\n    return Auto.hasKeyActivate(1);\n  }\n  /**\n   * 鼠标右键被按下\n   */\n  get isRight() {\n    return Auto.hasKeyActivate(2);\n  }\n  /**\n   * 鼠标中键被按下\n   */\n  get isMiddle() {\n    return Auto.hasKeyActivate(4);\n  }\n  /**\n   * 在此坐标模拟进行单击\n   * @param awitMs \n   */\n  async click(awitMs) {\n    awitMs = awitMs || 150;\n    Auto.setCursorPos(this.x, this.y);\n    Auto.mouse(\"MOUSEEVENTF_LEFTDOWN\");\n    await Sleep(awitMs);\n    return Auto.mouse(\"MOUSEEVENTF_LEFTUP\");\n  }\n  /**\n   * 模拟右键在此坐标按下和释放鼠标中键\n   * @param awitMs \n   */\n  async middle(awitMs) {\n    awitMs = awitMs || 150;\n    Auto.setCursorPos(this.x, this.y);\n    Auto.mouse(32);\n    await Sleep(awitMs);\n    return Auto.mouse(\"MOUSEEVENTF_MIDDLEUP\");\n  }\n  /**\n   * 在此坐标按下模拟右键点击\n   * @param awitMs \n   */\n  async rClick(awitMs) {\n    awitMs = awitMs || 150;\n    Auto.setCursorPos(this.x, this.y);\n    Auto.mouse(\"MOUSEEVENTF_RIGHTDOWN\");\n    await Sleep(awitMs);\n    return Auto.mouse(\"MOUSEEVENTF_RIGHTUP\");\n  }\n  /**\n   * 双击\n   * @param doubleAwitMs 双击间隔 \n   * @param clickAwitMs 模拟点击时间间隔\n   */\n  doubleClick(doubleAwitMs, clickAwitMs) {\n    doubleAwitMs = doubleAwitMs || 150;\n    clickAwitMs = clickAwitMs || 150;\n    this.click(clickAwitMs).then(() => {\n      Sleep(doubleAwitMs || 150).then(() => {\n        this.click(clickAwitMs);\n      });\n    });\n  }\n  /**\n   * 移动鼠标位置\n   * @param x \n   * @param y \n   */\n  moveMouse(x, y) {\n    Auto.setCursorPos(x, y);\n  }\n};\nvar Keyboard = class {\n  /**\n   * 是否按下了shift\n   */\n  get shiftKey() {\n    return Auto.hasKeyActivate(16) || Auto.hasKeyActivate(161) || Auto.hasKeyActivate(160);\n  }\n  /***\n   * 是否按下了alt\n   */\n  get altKey() {\n    return Auto.hasKeyActivate(18) || Auto.hasKeyActivate(164) || Auto.hasKeyActivate(165);\n  }\n  /***\n   * 是否按下了ctrl\n   */\n  get ctrlKey() {\n    return Auto.hasKeyActivate(17);\n  }\n  /***\n   * 是否按下了win\n   */\n  get winKey() {\n    return Auto.hasKeyActivate(91) || Auto.hasKeyActivate(92);\n  }\n  constructor(str) {\n    const data = str.split(\"|\");\n    this.vKey = Number(data[0]);\n    this.__isDown = Number(data[1]) ? true : false;\n    let KeyboardcodeEmen = KeyboardcodeEmenList.get(this.vKey);\n    if (!KeyboardcodeEmen) {\n      KeyboardcodeEmen = [\"unknown\", null, this.vKey, 0];\n    }\n    const [VK_key2, VK_code2, VK_keyCode2, VK_VirtualKey2, VK_Nickname] = KeyboardcodeEmen;\n    this.keyCode = VK_keyCode2;\n    this.key = VK_key2;\n    this.code = VK_code2 || VK_key2;\n  }\n  /**是否被按下 */\n  get isDown() {\n    return this.__isDown || hasKeyActivate(this.vKey);\n  }\n};\nvar SetIohook = false;\nvar Iohook_Mouse = class {\n  constructor() {\n    this._onlistenerCountList = {\n      close: [],\n      data: [],\n      mouse: [],\n      start: [],\n      move: []\n    };\n    this._oncelistenerCountList = {\n      close: [],\n      data: [],\n      mouse: [],\n      start: [],\n      move: []\n    };\n    this._Close = false;\n  }\n  once(eventName, listener) {\n    if (typeof eventName === \"function\") {\n      listener = eventName;\n      eventName = \"mouse\";\n    }\n    if (typeof listener !== \"function\")\n      return mouseHook;\n    mouseHook._oncelistenerCountList[eventName].push(listener);\n    return mouseHook;\n  }\n  on(eventName, listener) {\n    if (typeof eventName === \"function\") {\n      listener = eventName;\n      eventName = \"mouse\";\n    }\n    if (typeof listener !== \"function\")\n      return mouseHook;\n    mouseHook._onlistenerCountList[eventName].push(listener);\n    return mouseHook;\n  }\n  /**\n   * 开始\n   * @returns \n   */\n  start() {\n    SetIohook = true;\n    let start = native.isStartHookMouse();\n    if (start)\n      throw new Error(\"the Task Has Started.\");\n    native.installHookMouse();\n    const oid_Mouse_info = {\n      x: 0,\n      y: 0,\n      isDown: false\n    };\n    if (native.isStartHookMouse()) {\n      mouseHook._Close = false;\n    }\n    mouseHook.emit(\"start\");\n    let emit_getMouseNextSession = () => {\n      if (mouseHook._Close) {\n        return;\n      }\n      ;\n      let getMouseNextSession = native.getMouseNextSession();\n      if (getMouseNextSession == null ? void 0 : getMouseNextSession.length)\n        mouseHook.emit(\"data\", getMouseNextSession);\n      if (getMouseNextSession)\n        for (let index = 0; index < getMouseNextSession.length; index++) {\n          const MouseNextSession = getMouseNextSession[index];\n          const mousePoint = new MousePoint(MouseNextSession);\n          mouseHook.emit(\"mouse\", mousePoint);\n          if (oid_Mouse_info.x != mousePoint.x || oid_Mouse_info.y != mousePoint.y) {\n            mouseHook.emit(\"move\", mousePoint.x, mousePoint.y, mousePoint);\n          }\n          oid_Mouse_info.isDown = mousePoint.isDown;\n          oid_Mouse_info.x = mousePoint.x;\n          oid_Mouse_info.y = mousePoint.y;\n        }\n    };\n    (async () => {\n      while (true) {\n        if (mouseHook._Close)\n          return;\n        await Sleep(50);\n        emit_getMouseNextSession();\n      }\n    })();\n  }\n  /**\n   * 结束\n   */\n  close() {\n    native.unHookMouse();\n    mouseHook.emit(\"close\");\n    mouseHook._Close = true;\n    mouseHook._oncelistenerCountList.close.length = 0;\n    mouseHook._oncelistenerCountList.data.length = 0;\n    mouseHook._oncelistenerCountList.mouse.length = 0;\n    mouseHook._oncelistenerCountList.move.length = 0;\n    mouseHook._oncelistenerCountList.start.length = 0;\n    mouseHook._onlistenerCountList.close.length = 0;\n    mouseHook._onlistenerCountList.data.length = 0;\n    mouseHook._onlistenerCountList.mouse.length = 0;\n    mouseHook._onlistenerCountList.move.length = 0;\n    mouseHook._onlistenerCountList.start.length = 0;\n  }\n  emit(eventName, ...data) {\n    const emitFunList = mouseHook._onlistenerCountList[eventName];\n    const onceEmitFunList = mouseHook._oncelistenerCountList[eventName];\n    for (let index = 0; index < emitFunList.length; index++) {\n      const emitFun = emitFunList[index];\n      emitFun.apply(mouseHook, data);\n    }\n    ;\n    for (let index = 0; index < onceEmitFunList.length; index++) {\n      const emitFun = onceEmitFunList[index];\n      emitFun.apply(mouseHook, data);\n    }\n    ;\n    onceEmitFunList.length = 0;\n    return emitFunList.length ? true : false;\n  }\n  /**\n   * 关闭监听\n   * @param eventName \n   * @param data \n   * @returns \n   */\n  off(eventName, treatmentMode, data) {\n    switch (treatmentMode) {\n      case \"on\": {\n        if (data) {\n          const listenerCountList = mouseHook._onlistenerCountList[eventName];\n          if (listenerCountList.indexOf(data)) {\n            return mouseHook._onlistenerCountList[eventName].splice(listenerCountList.indexOf(data), 1) ? true : false;\n          }\n        } else {\n          mouseHook._onlistenerCountList[eventName].length = 0;\n          return !mouseHook._onlistenerCountList[eventName].length;\n        }\n        break;\n      }\n      case \"once\": {\n        if (data) {\n          const listenerCountList = mouseHook._oncelistenerCountList[eventName];\n          if (listenerCountList.indexOf(data)) {\n            return mouseHook._oncelistenerCountList[eventName].splice(listenerCountList.indexOf(data), 1) ? true : false;\n          }\n        } else {\n          mouseHook._oncelistenerCountList[eventName].length = 0;\n          return !mouseHook._oncelistenerCountList[eventName].length;\n        }\n        break;\n      }\n    }\n    return false;\n  }\n};\nvar mouseHook = new Iohook_Mouse();\nfunction setWindowIconForExtract(handle, Extract, index) {\n  if (!Extract)\n    throw new Error(\"Extract Path not defined\");\n  return native.setWindowIconForExtract(ref.int(handle), ref.string(Extract), index ? ref.int(index) : 0);\n}\nfunction captureBmpToFile(FilePath, x, y, width, height) {\n  native.captureBmpToFile(ref.string(FilePath), ref.int(x || 0), ref.int(y || 0), ref.int(width || 0), ref.int(height || 0));\n}\nfunction sendKeyboard(keyCode, keyDown) {\n  let vk = vkKey(keyCode);\n  if (!vk)\n    throw new Error(\"The currently entered keyboard key name/key value does not exist\");\n  if (keyDown === null) {\n    native.sendKeyboard(vk);\n  } else\n    native.sendKeyboard(vk, ref.bool(keyDown));\n}\nfunction sendKeyboardSequence(...keys) {\n  (async () => {\n    for (let index = 0; index < keys.length; index++) {\n      const of_key = keys[index];\n      if (Array.isArray(of_key)) {\n        if (of_key == null ? void 0 : of_key[2]) {\n          let ms = ref.int(of_key == null ? void 0 : of_key[2]);\n          await Sleep(ms);\n        }\n        if (of_key.length < 2)\n          continue;\n        sendKeyboard(of_key[0], typeof (of_key == null ? void 0 : of_key[1]) == \"boolean\" ? of_key == null ? void 0 : of_key[1] : null);\n      } else if (typeof of_key == \"object\") {\n        let keys2 = Object.keys(of_key);\n        if (!keys2.includes(\"key\"))\n          continue;\n        if (keys2.includes(\"ms\")) {\n          let ms = ref.int(of_key.ms);\n          await Sleep(ms);\n        }\n        sendKeyboard(of_key.key, typeof of_key.down == \"undefined\" ? null : of_key.down);\n      }\n    }\n  })();\n}\nfunction getColor(x, y) {\n  return native.getColor(ref.int(x), ref.int(y));\n}\nfunction sendBasicKeys(ctrlKey, shiftKey, altKey, winKey, KeyCode) {\n  let _ctrlKey = false, _shiftKey = false, _altKey = false, _winKey = false;\n  let _KeyCode = null;\n  if (ctrlKey && typeof ctrlKey == \"object\") {\n    let keys = Object.keys(ctrlKey);\n    if (!keys.includes(\"key\") && !keys.includes(\"code\") && !vkKey(shiftKey)) {\n      throw new Error(\"The current function requires other keys, not only (ctrl, shift, ait, win)\");\n    }\n    _ctrlKey = keys.includes(\"ctrl\") ? true : false;\n    _shiftKey = keys.includes(\"shift\") ? true : false;\n    _altKey = keys.includes(\"alt\") ? true : false;\n    _winKey = keys.includes(\"win\") ? true : false;\n    _KeyCode = vkKey((ctrlKey == null ? void 0 : ctrlKey.key) || (ctrlKey == null ? void 0 : ctrlKey.code) || shiftKey || 0);\n  } else if (typeof ctrlKey == \"string\") {\n    _ctrlKey = ctrlKey.includes(\"ctrl\") ? true : false;\n    _shiftKey = ctrlKey.includes(\"shift\") ? true : false;\n    _altKey = ctrlKey.includes(\"alt\") ? true : false;\n    _winKey = ctrlKey.includes(\"win\") ? true : false;\n    _KeyCode = vkKey(ctrlKey.replace(/[+]|ctrl|shift|alt|win/g, \"\"));\n  } else {\n    _ctrlKey = ctrlKey ? true : false;\n    _shiftKey = shiftKey ? true : false;\n    _altKey = altKey ? true : false;\n    _winKey = winKey ? true : false;\n    _KeyCode = vkKey(KeyCode);\n  }\n  if ((_ctrlKey || _shiftKey || _altKey || _winKey) && _KeyCode !== null) {\n    native.sendBasicKeys(ref.bool(_ctrlKey), ref.bool(_shiftKey), ref.bool(_altKey), ref.bool(_winKey), ref.int(_KeyCode));\n  } else {\n    throw new Error(\"The current function can only execute standard shortcuts and cannot enter a key value alone or without a regular keystroke\");\n  }\n}\nvar Iohook_Keyboard = class {\n  constructor() {\n    this._onlistenerCountList = {\n      close: [],\n      data: [],\n      start: [],\n      change: []\n    };\n    this._oncelistenerCountList = {\n      close: [],\n      data: [],\n      start: [],\n      change: []\n    };\n    this._Close = false;\n  }\n  once(eventName, listener) {\n    if (typeof eventName === \"function\") {\n      listener = eventName;\n      eventName = \"change\";\n    }\n    if (typeof listener !== \"function\")\n      return keyboardHook;\n    keyboardHook._oncelistenerCountList[eventName].push(listener);\n    return keyboardHook;\n  }\n  on(eventName, listener) {\n    if (typeof eventName === \"function\") {\n      listener = eventName;\n      eventName = \"change\";\n    }\n    if (typeof listener !== \"function\")\n      return keyboardHook;\n    keyboardHook._onlistenerCountList[eventName].push(listener);\n    return keyboardHook;\n  }\n  /**\n   * 开始\n   * @returns \n   */\n  start() {\n    SetIohook = true;\n    let start = native.isStartKeyboardHook();\n    if (start)\n      throw new Error(\"the Task Has Started.\");\n    native.installKeyboardHook();\n    if (native.isStartKeyboardHook()) {\n      keyboardHook._Close = false;\n    }\n    keyboardHook.emit(\"start\");\n    let emit_getKeyboardNextSession = () => {\n      let getKeyboardNextSession = native.getKeyboardNextSession();\n      if (getKeyboardNextSession == null ? void 0 : getKeyboardNextSession.length)\n        keyboardHook.emit(\"data\", getKeyboardNextSession);\n      if (getKeyboardNextSession)\n        for (let index = 0; index < getKeyboardNextSession.length; index++) {\n          const KeyboardNextSession = getKeyboardNextSession[index];\n          const KeyboardPoint = new Keyboard(KeyboardNextSession);\n          keyboardHook.emit(\"change\", KeyboardPoint);\n        }\n    };\n    (async () => {\n      while (true) {\n        if (keyboardHook._Close)\n          return;\n        await Sleep(15);\n        emit_getKeyboardNextSession();\n      }\n    })();\n    return start;\n  }\n  /**\n   * 结束\n   */\n  close() {\n    native.unKeyboardHook();\n    keyboardHook.emit(\"close\");\n    keyboardHook._Close = true;\n    keyboardHook._oncelistenerCountList.close.length = 0;\n    keyboardHook._oncelistenerCountList.data.length = 0;\n    keyboardHook._oncelistenerCountList.change.length = 0;\n    keyboardHook._oncelistenerCountList.start.length = 0;\n    keyboardHook._onlistenerCountList.close.length = 0;\n    keyboardHook._onlistenerCountList.data.length = 0;\n    keyboardHook._onlistenerCountList.change.length = 0;\n    keyboardHook._onlistenerCountList.start.length = 0;\n  }\n  emit(eventName, ...data) {\n    const emitFunList = keyboardHook._onlistenerCountList[eventName];\n    const onceEmitFunList = keyboardHook._oncelistenerCountList[eventName];\n    for (let index = 0; index < emitFunList.length; index++) {\n      const emitFun = emitFunList[index];\n      emitFun.apply(keyboardHook, data);\n    }\n    ;\n    for (let index = 0; index < onceEmitFunList.length; index++) {\n      const emitFun = onceEmitFunList[index];\n      emitFun.apply(keyboardHook, data);\n    }\n    ;\n    onceEmitFunList.length = 0;\n    return emitFunList.length ? true : false;\n  }\n  /**\n   * 关闭监听\n   * @param eventName \n   * @param data \n   * @returns \n   */\n  off(eventName, treatmentMode, data) {\n    switch (treatmentMode) {\n      case \"on\": {\n        if (data) {\n          const listenerCountList = keyboardHook._onlistenerCountList[eventName];\n          if (listenerCountList.indexOf(data)) {\n            return keyboardHook._onlistenerCountList[eventName].splice(listenerCountList.indexOf(data), 1) ? true : false;\n          }\n        } else {\n          keyboardHook._onlistenerCountList[eventName].length = 0;\n          return !keyboardHook._onlistenerCountList[eventName].length;\n        }\n        break;\n      }\n      case \"once\": {\n        if (data) {\n          const listenerCountList = keyboardHook._oncelistenerCountList[eventName];\n          if (listenerCountList.indexOf(data)) {\n            return keyboardHook._oncelistenerCountList[eventName].splice(listenerCountList.indexOf(data), 1) ? true : false;\n          }\n        } else {\n          keyboardHook._oncelistenerCountList[eventName].length = 0;\n          return !keyboardHook._oncelistenerCountList[eventName].length;\n        }\n        break;\n      }\n    }\n    return false;\n  }\n};\nvar keyboardHook = new Iohook_Keyboard();\nvar Auto = {\n  sendKeyboard,\n  sendKeyboardSequence,\n  getColor,\n  sendBasicKeys,\n  setWindowEnabled,\n  setCursorPos,\n  mouse,\n  rightClick,\n  leftClick,\n  getBasicKeys,\n  getMouseMovePoints,\n  powerControl,\n  SetBlockInput,\n  SetSystemHOOK,\n  hasKeyActivate,\n  mouseHook,\n  keyboardHook\n};\nvar Usb = {\n  getHub: getHidUsbList,\n  getDevsInfo: getUsbDevsInfo,\n  watch: watchUSB\n};\nvar Shell = {\n  trash: deleteFile,\n  openApp,\n  getShortcutLink,\n  setShortcutLink,\n  freePort,\n  createSymlink,\n  createDirSymlink,\n  createHardLink\n};\nvar Process = {\n  watch: processWatchdog,\n  kill: killProcess,\n  killMatch: killProcessName,\n  getList: getProcessList,\n  getHandle: getProcessHandle,\n  getName: getProcessName,\n  getPath: getProcessidFilePath,\n  getFocus: getForegroundWindowProcessID,\n  has: hasProcess,\n  match: getProcessNameList,\n  matchDetails: getDetailsProcessNameList,\n  getDetailsList: getDetailsProcessList,\n  parentID: getProcessParentProcessID,\n  mianPID: getProcessParentProcessID,\n  subPID: getSubProcessID,\n  threadList: getProcessThreadList\n};\nvar registr = {\n  /**\n   * 直达路径解析\n   * @param Path 全路径(直达路径)\n   * @param atkey 是否将最后一个值解释为键\n   * @returns\n   */\n  analysisDirectPath,\n  /**\n   * 判断注册表中是否有该键值\n   * @param HKEY 根路径\n   * @param Path 路径\n   * @param key 键\n   * @time 0.06591796875 ms\n   * @returns\n   */\n  has: (HKEY, Path, key) => {\n    return hasRegistrKey(HKEY, Path, key);\n  },\n  /**\n   * 获取内容(文本)\n   * @param HKEY 根路径\n   * @param Path 路径\n   * @param key 键\n   * @time 0.108ms\n   * @returns\n   */\n  get: (HKEY, Path, key) => {\n    return getStringRegKey(HKEY, Path, key);\n  },\n  /**\n   * 设置键值对\n   * @param HKEY 根路径\n   * @param Path 路径\n   * @param key 键\n   * @param Value 数据\n   * @time 2.02392578125 ms\n   * @returns\n   */\n  set: (HKEY, Path, key, value) => {\n    return setRegistrKey(HKEY, Path, key, value);\n  },\n  /**\n   * 删除数据\n   * @param HKEY 根路径\n   * @param Path 路径\n   * @param key 键\n   * @time 0.076904296875 ms\n   * @returns\n   */\n  remove: (HKEY, Path, key) => {\n    return removeStringRegKey(HKEY, Path, key);\n  },\n  /**\n   * 枚举键值\n   * @param HKEY 根路径\n   * @param Path 路径\n   * @time 0.06689453125 ms\n   * @returns\n   */\n  keys: (HKEY, Path) => {\n    return enumRegistrKey(HKEY, Path);\n  },\n  /**\n   * 将当前的路径的注册表值转表\n   * @param HKEY\n   * @param Path\n   */\n  list: (HKEY, Path) => {\n    return listRegistrPath(HKEY, Path);\n  },\n  /**\n   * 创建新的路径\n   * @param HKEY 根路径\n   * @param Path 路径\n   * @time 2.02392578125 ms\n   * @returns\n   */\n  create: (HKEY, Path, key) => {\n    return createPathRegistr(HKEY, Path);\n  },\n  /**\n   * 打开一个注册表路径并返回一些实用方法\n   * @param HKEY 根路径\n   * @param Path 路径\n   * @param key 键\n   * @returns\n   */\n  open: (HKEY, Path, key) => {\n    return openRegKey(HKEY, Path, key);\n  },\n  /**\n   * 判断注册表中是否有该键值\n   * @param HKEY 根路径\n   * @param Path 路径\n   * @param key 键\n   * @time 0.06591796875 ms\n   * @returns\n   */\n  get hasRegistrKey() {\n    return this.has;\n  },\n  /**\n   * 将当前的路径的注册表值转表\n   * @param HKEY\n   * @param Path\n   */\n  get listRegistrPath() {\n    return this.list;\n  },\n  /**\n   * 枚举键值\n   * @param HKEY 根路径\n   * @param Path 路径\n   * @time 0.06689453125 ms\n   * @returns\n   */\n  get enumRegistrKey() {\n    return this.keys;\n  },\n  /**\n   * 删除数据\n   * @param HKEY 根路径\n   * @param Path 路径\n   * @param key 键\n   * @time 0.076904296875 ms\n   * @returns\n   */\n  get removeStringRegKey() {\n    return this.remove;\n  },\n  /**\n   * 设置键值对\n   * @param HKEY 根路径\n   * @param Path 路径\n   * @param key 键\n   * @param Value 数据\n   * @time 2.02392578125 ms\n   * @returns\n   */\n  get setRegistrKey() {\n    return this.set;\n  },\n  /**\n   * 获取内容(文本)\n   * @param HKEY 根路径\n   * @param Path 路径\n   * @param key 键\n   * @time 0.108ms\n   * @returns\n   */\n  get getStringRegKey() {\n    return this.get;\n  },\n  /**\n   * 获取内容(数字)\n   * @param HKEY 根路径\n   * @param Path 路径\n   * @param key 键\n   * @time 0.10888671875 ms\n   * @returns\n   */\n  getNumberRegKey: (HKEY, Path, key) => {\n    return getNumberRegKey(HKEY, Path, key);\n  },\n  /**\n   * 创建新的路径\n   * @param HKEY 根路径\n   * @param Path 路径\n   * @time 2.02392578125 ms\n   * @returns\n   */\n  get createPathRegistr() {\n    return this.create;\n  },\n  /**\n   * 获取内容(二进制 Buffer)\n   * @param HKEY 根路径\n   * @param Path 路径\n   * @param key 键\n   * @time 0.06787109375 ms\n   * @returns\n   */\n  getRegistrBuffValue: (HKEY, Path, key) => {\n    return getRegistrBuffValue(HKEY, Path, key);\n  },\n  /**\n   * 打开一个注册表路径并返回一些实用方法\n   * @param HKEY 根路径\n   * @param Path 路径\n   * @param key 键\n   * @returns\n   */\n  get openRegKey() {\n    return open;\n  },\n  getRegistrQword,\n  getRegistrDword,\n  setRegistrQword,\n  setRegistrDword,\n  removeStringRegValue,\n  removeStringRegKeyWalk,\n  removeStringTree,\n  isRegistrTreeKey\n};\nfunction _popen(cmd) {\n  return native.popen(ref.string(cmd));\n}\nfunction hasMutex(MutexName) {\n  return native.hasMutex(ref.string(MutexName));\n}\nfunction createMutex(MutexName) {\n  return native.createMutex(ref.string(MutexName));\n}\nfunction popen(cmd) {\n  return native.popen(ref.string(cmd));\n}\nvar Registr = registr;\nvar hmc = {\n  createMutex,\n  hasMutex,\n  Auto,\n  Clipboard,\n  HMC,\n  HWND,\n  MessageError,\n  MessageStop,\n  Process,\n  Registr,\n  SetBlockInput,\n  SetSystemHOOK,\n  SetWindowInTaskbarVisible,\n  Shell,\n  Sleep,\n  Usb,\n  Watch,\n  WatchWindowForeground,\n  WatchWindowPoint,\n  WebView2OnlineInstall,\n  Window,\n  _popen,\n  alert,\n  analysisDirectPath,\n  captureBmpToFile,\n  clearClipboard,\n  closedHandle,\n  confirm,\n  createDirSymlink,\n  createHardLink,\n  createPathRegistr,\n  createSymlink,\n  deleteFile,\n  desc,\n  enumAllProcessHandle,\n  enumChildWindows,\n  enumProcessHandle,\n  enumRegistrKey,\n  formatVolumePath,\n  freePort,\n  getAllWindows,\n  getAllWindowsHandle,\n  getBasicKeys,\n  getClipboardFilePaths,\n  getClipboardSequenceNumber,\n  getClipboardText,\n  getColor,\n  getConsoleHandle,\n  getCurrentMonitorRect,\n  getDetailsProcessList,\n  getDetailsProcessNameList,\n  getDeviceCaps,\n  getDeviceCapsAll,\n  getForegroundWindow,\n  getForegroundWindowProcessID,\n  getHandleProcessID,\n  getHidUsbList,\n  getMainWindow,\n  getMetrics,\n  getModulePathList,\n  getMouseMovePoints,\n  getNumberRegKey,\n  getPointWindow,\n  getPointWindowMain,\n  getPointWindowName,\n  getPointWindowProcessId,\n  getProcessHandle,\n  getProcessList,\n  getProcessName,\n  getProcessNameList,\n  getProcessParentProcessID,\n  getProcessThreadList,\n  getProcessidFilePath,\n  getRegistrBuffValue,\n  getRegistrDword,\n  getRegistrQword,\n  getShortcutLink,\n  getStringRegKey,\n  getSubProcessID,\n  getSystemIdleTime,\n  getSystemMenu,\n  getSystemMetricsLen,\n  getTrayList,\n  getUsbDevsInfo,\n  getVolumeList,\n  getWebView2Info,\n  getWindowClassName,\n  getWindowRect,\n  getWindowStyle,\n  getWindowTitle,\n  hasKeyActivate,\n  hasPortTCP,\n  hasPortUDP,\n  hasProcess,\n  hasRegistrKey,\n  hasWebView2,\n  hasWindowTop,\n  hideConsole,\n  isAdmin,\n  isEnabled,\n  isHandle,\n  isHandleWindowVisible,\n  isInMonitorWindow,\n  isMouseMonitorWindow,\n  isProcess,\n  isRegistrTreeKey,\n  isSystemX64,\n  keyboardHook,\n  killProcess,\n  killProcessName,\n  leftClick,\n  listRegistrPath,\n  lookHandleCloseWindow,\n  lookHandleGetTitle,\n  lookHandleSetTitle,\n  lookHandleShowWindow,\n  messageBox,\n  mouse,\n  mouseHook,\n  native,\n  openApp,\n  openExternal,\n  openPath,\n  openRegKey,\n  openURL,\n  platform,\n  popen,\n  powerControl,\n  processWatchdog,\n  ref,\n  registr,\n  removeStringRegKey,\n  removeStringRegKeyWalk,\n  removeStringRegValue,\n  removeStringTree,\n  rightClick,\n  sendBasicKeys,\n  sendKeyboard,\n  sendKeyboardSequence,\n  setClipboardFilePaths,\n  setClipboardText,\n  setCloseWindow,\n  setCursorPos,\n  setHandleTransparent,\n  setRegistrDword,\n  setRegistrKey,\n  setRegistrQword,\n  setShortcutLink,\n  setShowWindow,\n  setWindowEnabled,\n  setWindowFocus,\n  setWindowIconForExtract,\n  setWindowMode,\n  setWindowTitle,\n  setWindowTop,\n  showConsole,\n  showMonitors,\n  shutMonitors,\n  sleep,\n  system,\n  systemChcp,\n  systemStartTime,\n  trash,\n  updateWindow,\n  version,\n  watchClipboard,\n  watchUSB,\n  windowJitter\n};\nvar hmc_default = hmc;\nprocess.on(\"exit\", function () {\n  if (SetIohook) {\n    native.unHookMouse();\n    native.unKeyboardHook();\n    native.clearEnumAllProcessList();\n    native.clearEnumProcessHandle();\n  }\n});\n// Annotate the CommonJS export names for ESM import in node:\n0 && (module.exports = {\n  Auto,\n  Clipboard,\n  HMC,\n  HWND,\n  MessageError,\n  MessageStop,\n  Process,\n  Registr,\n  SetBlockInput,\n  SetSystemHOOK,\n  SetWindowInTaskbarVisible,\n  Shell,\n  Sleep,\n  Usb,\n  Watch,\n  WatchWindowForeground,\n  WatchWindowPoint,\n  WebView2OnlineInstall,\n  Window,\n  _KeyboardcodeComparisonTable,\n  _KeyboardcodeEmenList,\n  _popen,\n  alert,\n  analysisDirectPath,\n  captureBmpToFile,\n  clearClipboard,\n  closedHandle,\n  confirm,\n  createDirSymlink,\n  createHardLink,\n  createMutex,\n  createPathRegistr,\n  createSymlink,\n  deleteFile,\n  desc,\n  enumAllProcessHandle,\n  enumChildWindows,\n  enumProcessHandle,\n  enumRegistrKey,\n  formatVolumePath,\n  freePort,\n  getAllWindows,\n  getAllWindowsHandle,\n  getBasicKeys,\n  getClipboardFilePaths,\n  getClipboardSequenceNumber,\n  getClipboardText,\n  getColor,\n  getConsoleHandle,\n  getCurrentMonitorRect,\n  getDetailsProcessList,\n  getDetailsProcessNameList,\n  getDeviceCaps,\n  getDeviceCapsAll,\n  getForegroundWindow,\n  getForegroundWindowProcessID,\n  getHandleProcessID,\n  getHidUsbList,\n  getMainWindow,\n  getMetrics,\n  getModulePathList,\n  getMouseMovePoints,\n  getNumberRegKey,\n  getPointWindow,\n  getPointWindowMain,\n  getPointWindowName,\n  getPointWindowProcessId,\n  getProcessHandle,\n  getProcessList,\n  getProcessName,\n  getProcessNameList,\n  getProcessParentProcessID,\n  getProcessThreadList,\n  getProcessidFilePath,\n  getRegistrBuffValue,\n  getRegistrDword,\n  getRegistrQword,\n  getShortcutLink,\n  getStringRegKey,\n  getSubProcessID,\n  getSystemIdleTime,\n  getSystemMenu,\n  getSystemMetricsLen,\n  getTrayList,\n  getUsbDevsInfo,\n  getVolumeList,\n  getWebView2Info,\n  getWindowClassName,\n  getWindowRect,\n  getWindowStyle,\n  getWindowTitle,\n  hasKeyActivate,\n  hasMutex,\n  hasPortTCP,\n  hasPortUDP,\n  hasProcess,\n  hasRegistrKey,\n  hasWebView2,\n  hasWindowTop,\n  hideConsole,\n  hmc,\n  isAdmin,\n  isEnabled,\n  isHandle,\n  isHandleWindowVisible,\n  isInMonitorWindow,\n  isMouseMonitorWindow,\n  isProcess,\n  isRegistrTreeKey,\n  isSystemX64,\n  keyboardHook,\n  killProcess,\n  killProcessName,\n  leftClick,\n  listRegistrPath,\n  lookHandleCloseWindow,\n  lookHandleGetTitle,\n  lookHandleSetTitle,\n  lookHandleShowWindow,\n  messageBox,\n  mouse,\n  mouseHook,\n  native,\n  openApp,\n  openExternal,\n  openPath,\n  openRegKey,\n  openURL,\n  platform,\n  popen,\n  powerControl,\n  processWatchdog,\n  ref,\n  registr,\n  removeStringRegKey,\n  removeStringRegKeyWalk,\n  removeStringRegValue,\n  removeStringTree,\n  rightClick,\n  sendBasicKeys,\n  sendKeyboard,\n  sendKeyboardSequence,\n  setClipboardFilePaths,\n  setClipboardText,\n  setCloseWindow,\n  setCursorPos,\n  setHandleTransparent,\n  setRegistrDword,\n  setRegistrKey,\n  setRegistrQword,\n  setShortcutLink,\n  setShowWindow,\n  setWindowEnabled,\n  setWindowFocus,\n  setWindowIconForExtract,\n  setWindowMode,\n  setWindowTitle,\n  setWindowTop,\n  showConsole,\n  showMonitors,\n  shutMonitors,\n  sleep,\n  system,\n  systemChcp,\n  systemStartTime,\n  trash,\n  updateWindow,\n  version,\n  watchClipboard,\n  watchUSB,\n  windowJitter\n});\n\n"
        }
    ]
}