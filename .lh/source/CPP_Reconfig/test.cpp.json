{
    "sourceFile": "source/CPP_Reconfig/test.cpp",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1690222407056,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1690222407056,
            "name": "Commit-0",
            "content": "#define _CRT_SECURE_NO_WARNINGS\r\n#include <iostream>\r\n#include \"./util/util.h\"\r\n\r\nint main()\r\n{\r\n    // 设置打印等级为报告所有\r\n    hmc_console::setLevel(hmc_console::level::all);\r\n\r\n\r\n    // -----------------------------------environment.hpp---------------------------------------------------\r\n    \r\n    // ? 基础环境函数\r\n    hmc_console::separator();\r\n    hmc_console::debug(\"test[environment.hpp]  fn-> main\", \"Hello World!\");\r\n    hmc_console::debug(\"test[environment.hpp]  fn-> getcmdLine\", hmc_env::getcmdLine());\r\n    hmc_console::debug(\"test[environment.hpp]  fn-> getexecPath\", hmc_env::getexecPath());\r\n    hmc_console::debug(\"test[environment.hpp]  fn-> getppid\", hmc_env::getppid());\r\n    hmc_console::debug(\"test[environment.hpp]  fn-> getarch\", hmc_env::getarch());\r\n    hmc_console::debug(\"test[environment.hpp]  fn-> getpid\", hmc_env::getpid());\r\n    hmc_console::debug(\"test[environment.hpp]  fn-> getcmd\", hmc_env::getcmd());\r\n    hmc_console::debug(\"test[environment.hpp]  fn-> getcwd\", hmc_env::getcwd());\r\n    hmc_console::debug(\"test[environment.hpp]  fn-> getexecDirPath\", hmc_env::getexecDirPath());\r\n    hmc_console::debug(\"test[environment.hpp]  fn-> getEnvList\", hmc_env::getEnvList());\r\n    hmc_console::debug(\"test[environment.hpp]  fn-> getbinArch\", hmc_env::getbinArch());\r\n    hmc_console::debug(\"test[environment.hpp]  fn-> isAdmin\", hmc_env::isAdmin());\r\n    \r\n\r\n    // ? 测试互斥体 增删改查\r\n    string debugkey = \"____HMC(·——·)DEB____\";\r\n    hmc_console::debug(\"test[environment.hpp]  fn-> Mutex::list\", hmc_env::Mutex::list());\r\n    hmc_console::debug(\"test[environment.hpp]  fn-> Mutex::has<'debugkey'>\", hmc_env::Mutex::has(debugkey));\r\n\r\n    // 没有则创建\r\n    if (!hmc_env::Mutex::has(debugkey))\r\n    {\r\n        // 创建互斥体\r\n        hmc_env::Mutex::create(debugkey);\r\n\r\n        // 是否创建成功\r\n        if (hmc_env::Mutex::has(debugkey))\r\n        {\r\n            hmc_console::info(\"Mutex\", \"ok\");\r\n        }\r\n        else\r\n        {\r\n            hmc_console::info(\"Mutex\", \"error\");\r\n        }\r\n    }\r\n\r\n    // 查询表中是否有 和删除此互斥体\r\n    hmc_console::debug(\"test[environment.hpp]  fn-> Mutex::list\", hmc_env::Mutex::list());\r\n\r\n    hmc_env::Mutex::remove(debugkey);\r\n\r\n    hmc_console::debug(\"test[environment.hpp]  fn-> Mutex::list\", hmc_env::Mutex::list());\r\n    hmc_console::debug(\"test[environment.hpp]  fn-> Mutex::has<'debugkey'>\", hmc_env::Mutex::has(debugkey));\r\n\r\n    // ?  环境变量 (注意此变量会生效与所有通过当前程序运行的环境 ! 此操作不会写入系统)\r\n\r\n    hmc_console::debug(\"test[environment.hpp]  fn-> getenv<hmc>\", hmc_env::getenv(\"hmc\"));\r\n    hmc_console::debug(\"test[environment.hpp]  fn-> putenv<hmc>\", hmc_env::putenv(\"hmc\",\"6666\"));\r\n    hmc_console::debug(\"test[environment.hpp]  fn-> getenv<hmc>\", hmc_env::getenv(\"hmc\"));\r\n\r\n    hmc_console::debug(\"test[environment.hpp]  fn-> removeEnv<hmc>\", hmc_env::removeEnv(\"hmc\"));\r\n    hmc_console::debug(\"test[environment.hpp]  fn-> getenv<hmc>\", hmc_env::getenv(\"hmc\"));\r\n\r\n    // ! 环境变量 （直接写入系统的）\r\n\r\n    // // *从系统环境（注册表）变量获取 \r\n    // // ? 按照标准存在优先级 如果冲突的变量是单个变量优先获取用户变量  如果是变量数组则应当合并获取\r\n    // hmc_console::debug(\"test[environment.hpp]  fn-> systemEnv::get<hmc_system_env>\", hmc_env::systemEnv::get(\"hmc_system_env\"));\r\n    // hmc_console::debug(\"test[environment.hpp]  fn-> systemEnv::put<hmc_system_env>\", hmc_env::systemEnv::put(\"hmc_system_env\",\"6666\"));\r\n    // hmc_console::debug(\"test[environment.hpp]  fn-> systemEnv::get<hmc_system_env>\", hmc_env::systemEnv::get(\"hmc_system_env\"));\r\n    // // ? 系统变量\r\n    // hmc_console::debug(\"test[environment.hpp]  fn-> systemEnv::getSys<hmc_system_env>\", hmc_env::systemEnv::getSys(\"hmc_system_env_sys\"));\r\n    // hmc_console::debug(\"test[environment.hpp]  fn-> systemEnv::putSys<hmc_system_env>\", hmc_env::systemEnv::putSys(\"hmc_system_env_sys\",\"6666\"));\r\n    // hmc_console::debug(\"test[environment.hpp]  fn-> systemEnv::getSys<hmc_system_env>\", hmc_env::systemEnv::getSys(\"hmc_system_env_sys\"));\r\n    // // ? 环境变量\r\n    // hmc_console::debug(\"test[environment.hpp]  fn-> systemEnv::getUse<hmc_system_env>\", hmc_env::systemEnv::getUse(\"hmc_system_env_use\"));\r\n    // hmc_console::debug(\"test[environment.hpp]  fn-> systemEnv::putUse<hmc_system_env>\", hmc_env::systemEnv::putUse(\"hmc_system_env_use\",\"6666\"));\r\n    // hmc_console::debug(\"test[environment.hpp]  fn-> systemEnv::getUse<hmc_system_env>\", hmc_env::systemEnv::getUse(\"hmc_system_env_use\"));\r\n    \r\n    // // ?删除系统环境变量(All)\r\n    // hmc_console::debug(\"test[environment.hpp]  fn-> systemEnv::remove<hmc_system_env>\", hmc_env::systemEnv::remove(\"hmc_system_env_All\"));\r\n    // hmc_console::debug(\"test[environment.hpp]  fn-> systemEnv::get<hmc_system_env>\", hmc_env::systemEnv::get(\"hmc_system_env_All\"));\r\n    // // ?删除系统环境变量(用户)\r\n    // hmc_console::debug(\"test[environment.hpp]  fn-> systemEnv::removeUse<hmc_system_env_Use>\", hmc_env::systemEnv::removeUse(\"hmc_system_env_Use\"));\r\n    // hmc_console::debug(\"test[environment.hpp]  fn-> systemEnv::getUse<hmc_system_env_Use>\", hmc_env::systemEnv::getUse(\"hmc_system_env_Use\"));\r\n    // // ?删除系统环境变量(系统)\r\n    // hmc_console::debug(\"test[environment.hpp]  fn-> systemEnv::removeSys<hmc_system_env_Sys>\", hmc_env::systemEnv::removeSys(\"hmc_system_env_Sys\"));\r\n    // hmc_console::debug(\"test[environment.hpp]  fn-> systemEnv::getSys<hmc_system_env_Sys>\", hmc_env::systemEnv::getSys(\"hmc_system_env_Sys\"));\r\n    // // ?直接从系统获取变量环境并写入到本地\r\n    // hmc_console::debug(\"test[environment.hpp]  fn-> systemEnv::updateThis<>\", hmc_env::systemEnv::updateThis());\r\n\r\n    hmc_console::separator();\r\n    // -----------------------------------------------------------------------------------------\r\n\r\n\r\n    // map<string, string> envList= hmc_env::getEnvList();\r\n    //  for (const auto& entry : envList) {\r\n    //     std::cout << entry.first << \": \" << entry.second << std::endl;\r\n    // }\r\n\r\n    system(\"pause\");\r\n}\r\n"
        }
    ]
}