{
    "sourceFile": "source/CPP_Reconfig/util/napi_util.hpp",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 11,
            "patches": [
                {
                    "date": 1687656782059,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1687656866705,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -286,8 +286,56 @@\n                 }\r\n \r\n                 return ResultforObject;\r\n             }\r\n+            /**\r\n+             * @brief 创建一个全是int的 键值对对象\r\n+             *\r\n+             * @param env\r\n+             * @param mapObject\r\n+             * @return napi_value\r\n+             */\r\n+            napi_value Object(napi_env env, map<string, int> mapObject)\r\n+            {\r\n+                napi_status status;\r\n+                napi_value ResultforObject;\r\n+                status = napi_create_object(env, &ResultforObject);\r\n+                assert(status == napi_ok);\r\n+                map<string, int>::iterator it = mapObject.begin();\r\n+\r\n+                while (it != mapObject.end())\r\n+                {\r\n+                    status = napi_set_property(env, ResultforObject, create_value::String(env, it->first), create_value::Number(env, it->second));\r\n+                    assert(status == napi_ok);\r\n+                    it++;\r\n+                }\r\n+\r\n+                return ResultforObject;\r\n+            }\r\n+            /**\r\n+             * @brief 创建一个全是napi_value的 键值对对象\r\n+             *\r\n+             * @param env\r\n+             * @param mapObject\r\n+             * @return napi_value\r\n+             */\r\n+            napi_value Object(napi_env env, map<string, napi_value> mapObject)\r\n+            {\r\n+                napi_status status;\r\n+                napi_value ResultforObject;\r\n+                status = napi_create_object(env, &ResultforObject);\r\n+                assert(status == napi_ok);\r\n+                map<string, napi_value>::iterator it = mapObject.begin();\r\n+\r\n+                while (it != mapObject.end())\r\n+                {\r\n+                    status = napi_set_property(env, ResultforObject, create_value::String(env, it->first), it->second);\r\n+                    assert(status == napi_ok);\r\n+                    it++;\r\n+                }\r\n+\r\n+                return ResultforObject;\r\n+            }\r\n         }\r\n     };\r\n \r\n     namespace get_value\r\n"
                },
                {
                    "date": 1687657498418,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -102,8 +102,22 @@\n             status = napi_create_int64(env, number, &result);\r\n             assert(status == napi_ok);\r\n             return result;\r\n         }\r\n+         /**\r\n+         * @brief 返回一个 number到js\r\n+         *\r\n+         * @param number\r\n+         * @return napi_value\r\n+         */\r\n+        napi_value Number(napi_env env, double number = 0.0)\r\n+        {\r\n+            napi_status status;\r\n+            napi_value result;\r\n+            status = napi_create_double(env, number, &result);\r\n+            assert(status == napi_ok);\r\n+            return result;\r\n+        }\r\n         /**\r\n          * @brief 返回一个 number到js\r\n          *\r\n          * @param bigint\r\n"
                },
                {
                    "date": 1687659351867,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,7 +1,8 @@\n #define NAPI_EXPERIMENTAL // 开启实验性功能 比如异步(多线程)\r\n #include <node_api.h>\r\n #include <assert.h>\r\n+#include <any>\r\n #include \"./text.hpp\"\r\n #include \"./environment.hpp\"\r\n \r\n #define _HMC_ALL_UTIL 0x0666\r\n@@ -102,9 +103,9 @@\n             status = napi_create_int64(env, number, &result);\r\n             assert(status == napi_ok);\r\n             return result;\r\n         }\r\n-         /**\r\n+        /**\r\n          * @brief 返回一个 number到js\r\n          *\r\n          * @param number\r\n          * @return napi_value\r\n@@ -162,10 +163,44 @@\n             return Results;\r\n         }\r\n         namespace Array\r\n         {\r\n-\r\n             /**\r\n+             * @brief 支持多种类型的数组\r\n+             * \r\n+             * @param env \r\n+             * @param wstringVector \r\n+             * @return napi_value \r\n+             */\r\n+            napi_value New(napi_env env, vector<napi_value> wstringVector)\r\n+            {\r\n+                napi_status status;\r\n+                napi_value ResultforArray;\r\n+                status = napi_create_array(env, &ResultforArray);\r\n+                assert(status == napi_ok);\r\n+                for (unsigned index = 0; index < wstringVector.size(); index++)\r\n+                {\r\n+                    napi_value push_item_data = wstringVector[index];\r\n+                    status = napi_set_element(env, ResultforArray, index, push_item_data);\r\n+                    assert(status == napi_ok);\r\n+                }\r\n+                return ResultforArray;\r\n+            }\r\n+            napi_value New(napi_env env, vector<napi_value> wstringVector)\r\n+            {\r\n+                napi_status status;\r\n+                napi_value ResultforArray;\r\n+                status = napi_create_array(env, &ResultforArray);\r\n+                assert(status == napi_ok);\r\n+                for (unsigned index = 0; index < wstringVector.size(); index++)\r\n+                {\r\n+                    napi_value push_item_data = wstringVector[index];\r\n+                    status = napi_set_element(env, ResultforArray, index, push_item_data);\r\n+                    assert(status == napi_ok);\r\n+                }\r\n+                return ResultforArray;\r\n+            }\r\n+            /**\r\n              * @brief 创建一个全是文本的数组\r\n              *\r\n              * @param env\r\n              * @param stringVector\r\n@@ -184,8 +219,9 @@\n                     status = napi_create_string_utf8(env, push_item_data.c_str(), NAPI_AUTO_LENGTH, &push_item);\r\n                     assert(status == napi_ok);\r\n                     status = napi_set_element(env, ResultforArray, index, push_item);\r\n                     assert(status == napi_ok);\r\n+                    \r\n                 }\r\n                 return ResultforArray;\r\n             }\r\n             napi_value String(napi_env env, vector<wstring> wstringVector)\r\n"
                },
                {
                    "date": 1687659412581,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -184,18 +184,19 @@\n                     assert(status == napi_ok);\r\n                 }\r\n                 return ResultforArray;\r\n             }\r\n-            napi_value New(napi_env env, vector<napi_value> wstringVector)\r\n+            napi_value New(napi_env env, vector<any> wstringVector)\r\n             {\r\n                 napi_status status;\r\n                 napi_value ResultforArray;\r\n                 status = napi_create_array(env, &ResultforArray);\r\n                 assert(status == napi_ok);\r\n                 for (unsigned index = 0; index < wstringVector.size(); index++)\r\n                 {\r\n-                    napi_value push_item_data = wstringVector[index];\r\n-                    status = napi_set_element(env, ResultforArray, index, push_item_data);\r\n+                    any push_item_data = wstringVector[index];\r\n+                    \r\n+                    // status = napi_set_element(env, ResultforArray, index, push_item_data);\r\n                     assert(status == napi_ok);\r\n                 }\r\n                 return ResultforArray;\r\n             }\r\n"
                },
                {
                    "date": 1687660622329,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -120,8 +120,22 @@\n         }\r\n         /**\r\n          * @brief 返回一个 number到js\r\n          *\r\n+         * @param number\r\n+         * @return napi_value\r\n+         */\r\n+        napi_value Number(napi_env env, HWND number)\r\n+        {\r\n+            napi_status status;\r\n+            napi_value result;\r\n+            status = napi_create_int64(env, (long long)number, &result);\r\n+            assert(status == napi_ok);\r\n+            return result;\r\n+        }\r\n+        /**\r\n+         * @brief 返回一个 number到js\r\n+         *\r\n          * @param bigint\r\n          * @return napi_value\r\n          */\r\n         napi_value Bigint(napi_env env, long bigint = 0)\r\n@@ -161,16 +175,82 @@\n             status = napi_create_buffer(env, size, data, &Results);\r\n             assert(status == napi_ok);\r\n             return Results;\r\n         }\r\n+        /**\r\n+         * @brief 返回一个 null\r\n+         *\r\n+         * @param env\r\n+         * @param data\r\n+         * @param size\r\n+         * @return napi_value\r\n+         */\r\n+        napi_value Null(napi_env env)\r\n+        {\r\n+            napi_status status;\r\n+            napi_value Results;\r\n+            status = napi_get_null(env, &Results);\r\n+            assert(status == napi_ok);\r\n+            return Results;\r\n+        }\r\n+        /**\r\n+         * @brief 返回一个 undefined\r\n+         *\r\n+         * @param env\r\n+         * @param data\r\n+         * @param size\r\n+         * @return napi_value\r\n+         */\r\n+        napi_value Undefined(napi_env env)\r\n+        {\r\n+            napi_status status;\r\n+            napi_value Results;\r\n+            status = napi_get_undefined(env, &Results);\r\n+            assert(status == napi_ok);\r\n+            return Results;\r\n+        }\r\n+        /**\r\n+         * @brief 自识别类型\r\n+         *\r\n+         * @param env\r\n+         * @param anyValue\r\n+         * @return napi_value\r\n+         */\r\n+        napi_value New(napi_env env, any anyValue)\r\n+        {\r\n+            napi_status status;\r\n+            napi_value ResultForAny;\r\n+            if (anyValue.has_value())\r\n+            {\r\n+\r\n+                if (\r\n+                    anyValue.type() == typeid(double) ||\r\n+                    anyValue.type() == typeid(DWORD) ||\r\n+                    anyValue.type() == typeid(int) ||\r\n+                    anyValue.type() == typeid(int64_t) ||\r\n+                    anyValue.type() == typeid(long) ||\r\n+                    anyValue.type() == typeid(long long) ||\r\n+                    anyValue.type() == typeid(float) ||\r\n+                    anyValue.type() == typeid(HWND))\r\n+                {\r\n+                    ResultForAny = Number(env, any_cast<double>(anyValue));\r\n+                }\r\n+                else\r\n+                {\r\n+                    ResultForAny = Undefined(env);\r\n+                }\r\n+            }\r\n+            \r\n+            return ResultForAny;\r\n+        }\r\n         namespace Array\r\n         {\r\n             /**\r\n              * @brief 支持多种类型的数组\r\n-             * \r\n-             * @param env \r\n-             * @param wstringVector \r\n-             * @return napi_value \r\n+             *\r\n+             * @param env\r\n+             * @param wstringVector\r\n+             * @return napi_value\r\n              */\r\n             napi_value New(napi_env env, vector<napi_value> wstringVector)\r\n             {\r\n                 napi_status status;\r\n@@ -193,9 +273,9 @@\n                 assert(status == napi_ok);\r\n                 for (unsigned index = 0; index < wstringVector.size(); index++)\r\n                 {\r\n                     any push_item_data = wstringVector[index];\r\n-                    \r\n+\r\n                     // status = napi_set_element(env, ResultforArray, index, push_item_data);\r\n                     assert(status == napi_ok);\r\n                 }\r\n                 return ResultforArray;\r\n@@ -220,9 +300,8 @@\n                     status = napi_create_string_utf8(env, push_item_data.c_str(), NAPI_AUTO_LENGTH, &push_item);\r\n                     assert(status == napi_ok);\r\n                     status = napi_set_element(env, ResultforArray, index, push_item);\r\n                     assert(status == napi_ok);\r\n-                    \r\n                 }\r\n                 return ResultforArray;\r\n             }\r\n             napi_value String(napi_env env, vector<wstring> wstringVector)\r\n"
                },
                {
                    "date": 1687660878238,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -131,8 +131,11 @@\n             status = napi_create_int64(env, (long long)number, &result);\r\n             assert(status == napi_ok);\r\n             return result;\r\n         }\r\n+        napi_value Number(napi_env env, unsigned long number){\r\n+            return Number((int64_t)number);\r\n+        }\r\n         /**\r\n          * @brief 返回一个 number到js\r\n          *\r\n          * @param bigint\r\n@@ -231,9 +234,9 @@\n                     anyValue.type() == typeid(long long) ||\r\n                     anyValue.type() == typeid(float) ||\r\n                     anyValue.type() == typeid(HWND))\r\n                 {\r\n-                    ResultForAny = Number(env, any_cast<double>(anyValue));\r\n+                    ResultForAny = Number(env, any_cast<DWORD>(anyValue));\r\n                 }\r\n                 else\r\n                 {\r\n                     ResultForAny = Undefined(env);\r\n"
                },
                {
                    "date": 1687661364306,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -131,11 +131,24 @@\n             status = napi_create_int64(env, (long long)number, &result);\r\n             assert(status == napi_ok);\r\n             return result;\r\n         }\r\n-        napi_value Number(napi_env env, unsigned long number){\r\n-            return Number((int64_t)number);\r\n+        napi_value Number(napi_env env, unsigned long number)\r\n+        {\r\n+            napi_status status;\r\n+            napi_value result;\r\n+            status = napi_create_int64(env, (long)number, &result);\r\n+            assert(status == napi_ok);\r\n+            return result;\r\n         }\r\n+        napi_value Number(napi_env env, unsigned long number)\r\n+        {\r\n+            napi_status status;\r\n+            napi_value result;\r\n+            status = napi_create_int64(env, (long)number, &result);\r\n+            assert(status == napi_ok);\r\n+            return result;\r\n+        }\r\n         /**\r\n          * @brief 返回一个 number到js\r\n          *\r\n          * @param bigint\r\n@@ -225,27 +238,29 @@\n             if (anyValue.has_value())\r\n             {\r\n \r\n                 if (\r\n-                    anyValue.type() == typeid(double) ||\r\n                     anyValue.type() == typeid(DWORD) ||\r\n                     anyValue.type() == typeid(int) ||\r\n                     anyValue.type() == typeid(int64_t) ||\r\n                     anyValue.type() == typeid(long) ||\r\n                     anyValue.type() == typeid(long long) ||\r\n-                    anyValue.type() == typeid(float) ||\r\n                     anyValue.type() == typeid(HWND))\r\n                 {\r\n-                    ResultForAny = Number(env, any_cast<DWORD>(anyValue));\r\n+                    ResultForAny = Number(env, any_cast<long long>(anyValue));\r\n                 }\r\n                 else\r\n                 {\r\n                     ResultForAny = Undefined(env);\r\n                 }\r\n             }\r\n-            \r\n+\r\n             return ResultForAny;\r\n         }\r\n+        napi_value New(napi_env env)\r\n+        {\r\n+            return Undefined(env);\r\n+        }\r\n         namespace Array\r\n         {\r\n             /**\r\n              * @brief 支持多种类型的数组\r\n"
                },
                {
                    "date": 1687664789492,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -9,8 +9,16 @@\n using namespace std;\r\n using namespace hmc_text_util;\r\n using namespace hmc_env;\r\n \r\n+typedef enum {\r\n+  _float = 0,\r\n+  _double =1,\r\n+  _HWND = 2,\r\n+  \r\n+} any_type;\r\n+\r\n+\r\n namespace napi_util\r\n {\r\n     namespace text_util\r\n     {\r\n@@ -236,19 +244,30 @@\n             napi_status status;\r\n             napi_value ResultForAny;\r\n             if (anyValue.has_value())\r\n             {\r\n+                switch(){\r\n+                    case \r\n+                }\r\n \r\n-                if (\r\n+                if (anyValue.type() == typeid(DWORD))\r\n+                {\r\n+                    ResultForAny = Number(env, any_cast<DWORD>(anyValue));\r\n+                }\r\n+                else if (\r\n                     anyValue.type() == typeid(DWORD) ||\r\n                     anyValue.type() == typeid(int) ||\r\n                     anyValue.type() == typeid(int64_t) ||\r\n                     anyValue.type() == typeid(long) ||\r\n                     anyValue.type() == typeid(long long) ||\r\n-                    anyValue.type() == typeid(HWND))\r\n-                {\r\n-                    ResultForAny = Number(env, any_cast<long long>(anyValue));\r\n-                }\r\n+                    anyValue.type() == typeid(HWND))||\r\n+                        anyValue.type() == typeid(double) ||\r\n+                        anyValue.type() == typeid(float)\r\n+                        )\r\n+\r\n+                    {\r\n+                        ResultForAny = Number(env, any_cast<long long>(anyValue));\r\n+                    }\r\n                 else\r\n                 {\r\n                     ResultForAny = Undefined(env);\r\n                 }\r\n"
                },
                {
                    "date": 1687666432897,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -9,16 +9,8 @@\n using namespace std;\r\n using namespace hmc_text_util;\r\n using namespace hmc_env;\r\n \r\n-typedef enum {\r\n-  _float = 0,\r\n-  _double =1,\r\n-  _HWND = 2,\r\n-  \r\n-} any_type;\r\n-\r\n-\r\n namespace napi_util\r\n {\r\n     namespace text_util\r\n     {\r\n@@ -244,30 +236,38 @@\n             napi_status status;\r\n             napi_value ResultForAny;\r\n             if (anyValue.has_value())\r\n             {\r\n-                switch(){\r\n-                    case \r\n-                }\r\n \r\n                 if (anyValue.type() == typeid(DWORD))\r\n                 {\r\n                     ResultForAny = Number(env, any_cast<DWORD>(anyValue));\r\n                 }\r\n-                else if (\r\n-                    anyValue.type() == typeid(DWORD) ||\r\n-                    anyValue.type() == typeid(int) ||\r\n-                    anyValue.type() == typeid(int64_t) ||\r\n-                    anyValue.type() == typeid(long) ||\r\n-                    anyValue.type() == typeid(long long) ||\r\n-                    anyValue.type() == typeid(HWND))||\r\n-                        anyValue.type() == typeid(double) ||\r\n-                        anyValue.type() == typeid(float)\r\n-                        )\r\n-\r\n-                    {\r\n-                        ResultForAny = Number(env, any_cast<long long>(anyValue));\r\n-                    }\r\n+                else if (anyValue.type() == typeid(long))\r\n+                {\r\n+                    ResultForAny = Number(env, any_cast<long>(anyValue));\r\n+                }\r\n+                else if (anyValue.type() == typeid(long long))\r\n+                {\r\n+                    ResultForAny = Number(env, any_cast<long long>(anyValue));\r\n+                }\r\n+                else if (anyValue.type() == typeid(HWND))\r\n+                {\r\n+                    ResultForAny = Number(env, any_cast<HWND>(anyValue));\r\n+                }\r\n+                else if (anyValue.type() == typeid(int64_t))\r\n+                {\r\n+                    ResultForAny = Number(env, any_cast<int64_t>(anyValue));\r\n+                }\r\n+                else if (anyValue.type() == typeid(int))\r\n+                {\r\n+                    ResultForAny = Number(env, any_cast<int>(anyValue));\r\n+                }\r\n+                else if (anyValue.type() == typeid(short))\r\n+                {\r\n+                    ResultForAny = Number(env, any_cast<short>(anyValue));\r\n+                }\r\n+                \r\n                 else\r\n                 {\r\n                     ResultForAny = Undefined(env);\r\n                 }\r\n"
                },
                {
                    "date": 1687666554693,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -269,9 +269,8 @@\n                 else if (anyValue.type() == typeid(unsigned long long))\r\n                 {\r\n                     ResultForAny = Number(env, (unsigned long)any_cast<unsigned long long>(anyValue));\r\n                 }\r\n-                \r\n                 else\r\n                 {\r\n                     ResultForAny = Undefined(env);\r\n                 }\r\n"
                },
                {
                    "date": 1687722100175,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -653,8 +653,9 @@\n             napi_valuetype value_type;\r\n             napi_typeof(env, valuetype, &value_type);\r\n             return TypeName(value_type);\r\n         }\r\n+    \r\n     };\r\n \r\n     namespace assert\r\n     {\r\n"
                }
            ],
            "date": 1687656782059,
            "name": "Commit-0",
            "content": "#define NAPI_EXPERIMENTAL // 开启实验性功能 比如异步(多线程)\r\n#include <node_api.h>\r\n#include <assert.h>\r\n#include \"./text.hpp\"\r\n#include \"./environment.hpp\"\r\n\r\n#define _HMC_ALL_UTIL 0x0666\r\nusing namespace std;\r\nusing namespace hmc_text_util;\r\nusing namespace hmc_env;\r\n\r\nnamespace napi_util\r\n{\r\n    namespace text_util\r\n    {\r\n        using namespace hmc_text_util;\r\n    };\r\n    namespace env\r\n    {\r\n        using namespace hmc_env;\r\n    };\r\n\r\n    namespace create_value\r\n    {\r\n        // 创建一个布尔型\r\n        napi_value Boolean(napi_env env, bool value = false)\r\n        {\r\n            napi_status status;\r\n            napi_value result;\r\n            status = napi_get_boolean(env, value, &result);\r\n            assert(status == napi_ok);\r\n            return result;\r\n        }\r\n\r\n        // 返回一个 false js value\r\n        napi_value _false(napi_env env)\r\n        {\r\n            return Boolean(env, false);\r\n        }\r\n\r\n        // 返回一个true js value\r\n        napi_value _true(napi_env env)\r\n        {\r\n            return Boolean(env, true);\r\n        }\r\n\r\n        // 返回一个 string\r\n        napi_value String(napi_env env, string value)\r\n        {\r\n            napi_status status;\r\n            napi_value result;\r\n            status = napi_create_string_utf8(env, hmc_text_util::A2U8(value).c_str(), NAPI_AUTO_LENGTH, &result);\r\n            assert(status == napi_ok);\r\n            return result;\r\n        }\r\n\r\n        napi_value String(napi_env env, wstring value)\r\n        {\r\n            napi_status status;\r\n            napi_value result;\r\n            status = napi_create_string_utf8(env, hmc_text_util::W2U8(value).c_str(), NAPI_AUTO_LENGTH, &result);\r\n            assert(status == napi_ok);\r\n            return result;\r\n        }\r\n        napi_value String(napi_env env, wchar_t *value)\r\n        {\r\n            return String(env, wstring(value));\r\n        }\r\n        napi_value String(napi_env env, char *value)\r\n        {\r\n            return String(env, string(value));\r\n        }\r\n        // 返回一个 \"\"\r\n        napi_value _string(napi_env env)\r\n        {\r\n            return String(env, \"\");\r\n        }\r\n        /**\r\n         * @brief 返回一个 number到js\r\n         *\r\n         * @param number\r\n         * @return napi_value\r\n         */\r\n        napi_value Number(napi_env env, int number = 0)\r\n        {\r\n            napi_status status;\r\n            napi_value result;\r\n            status = napi_create_int32(env, number, &result);\r\n            assert(status == napi_ok);\r\n            return result;\r\n        }\r\n        /**\r\n         * @brief 返回一个 number到js\r\n         *\r\n         * @param number\r\n         * @return napi_value\r\n         */\r\n        napi_value Number(napi_env env, int64_t number = 0)\r\n        {\r\n            napi_status status;\r\n            napi_value result;\r\n            status = napi_create_int64(env, number, &result);\r\n            assert(status == napi_ok);\r\n            return result;\r\n        }\r\n        /**\r\n         * @brief 返回一个 number到js\r\n         *\r\n         * @param bigint\r\n         * @return napi_value\r\n         */\r\n        napi_value Bigint(napi_env env, long bigint = 0)\r\n        {\r\n            napi_status status;\r\n            napi_value result;\r\n            status = napi_create_bigint_int64(env, bigint, &result);\r\n            assert(status == napi_ok);\r\n            return result;\r\n        }\r\n        /**\r\n         * @brief 返回一个 number到js\r\n         *\r\n         * @param bigint\r\n         * @return napi_value\r\n         */\r\n        napi_value Bigint(napi_env env, long long bigint = 0)\r\n        {\r\n            napi_status status;\r\n            napi_value result;\r\n            status = napi_create_bigint_int64(env, bigint, &result);\r\n            assert(status == napi_ok);\r\n            return result;\r\n        }\r\n        /**\r\n         * @brief 返回一个 Buffer到js(返回的是空值 napi 不支持)\r\n         *\r\n         * @param env\r\n         * @param data\r\n         * @param size\r\n         * @return napi_value\r\n         */\r\n        napi_value Buffer(napi_env env, void **data, size_t size)\r\n        {\r\n            napi_status status;\r\n            napi_value Results;\r\n            status = napi_create_buffer(env, size, data, &Results);\r\n            assert(status == napi_ok);\r\n            return Results;\r\n        }\r\n        namespace Array\r\n        {\r\n\r\n            /**\r\n             * @brief 创建一个全是文本的数组\r\n             *\r\n             * @param env\r\n             * @param stringVector\r\n             * @return napi_value\r\n             */\r\n            napi_value String(napi_env env, vector<string> stringVector)\r\n            {\r\n                napi_status status;\r\n                napi_value ResultforArray;\r\n                status = napi_create_array(env, &ResultforArray);\r\n                assert(status == napi_ok);\r\n                for (unsigned index = 0; index < stringVector.size(); index++)\r\n                {\r\n                    napi_value push_item;\r\n                    string push_item_data = stringVector[index];\r\n                    status = napi_create_string_utf8(env, push_item_data.c_str(), NAPI_AUTO_LENGTH, &push_item);\r\n                    assert(status == napi_ok);\r\n                    status = napi_set_element(env, ResultforArray, index, push_item);\r\n                    assert(status == napi_ok);\r\n                }\r\n                return ResultforArray;\r\n            }\r\n            napi_value String(napi_env env, vector<wstring> wstringVector)\r\n            {\r\n                napi_status status;\r\n                napi_value ResultforArray;\r\n                status = napi_create_array(env, &ResultforArray);\r\n                assert(status == napi_ok);\r\n                for (unsigned index = 0; index < wstringVector.size(); index++)\r\n                {\r\n                    napi_value push_item;\r\n                    wstring push_item_data = wstringVector[index];\r\n                    status = napi_create_string_utf8(env, W2U8(push_item_data).c_str(), NAPI_AUTO_LENGTH, &push_item);\r\n                    assert(status == napi_ok);\r\n                    status = napi_set_element(env, ResultforArray, index, push_item);\r\n                    assert(status == napi_ok);\r\n                }\r\n                return ResultforArray;\r\n            }\r\n            /**\r\n             * @brief 创建一个全是数字的数组\r\n             *\r\n             * @param env\r\n             * @param intVector\r\n             * @return napi_value\r\n             */\r\n            napi_value Number(napi_env env, vector<int> intVector)\r\n            {\r\n                napi_status status;\r\n                napi_value ResultforArray;\r\n                status = napi_create_array(env, &ResultforArray);\r\n                assert(status == napi_ok);\r\n                for (unsigned index = 0; index < intVector.size(); index++)\r\n                {\r\n                    napi_value push_item;\r\n                    int push_item_data = intVector[index];\r\n                    status = napi_create_int64(env, push_item_data, &push_item);\r\n                    assert(status == napi_ok);\r\n                    status = napi_set_element(env, ResultforArray, index, push_item);\r\n                    assert(status == napi_ok);\r\n                }\r\n                return ResultforArray;\r\n            }\r\n            /**\r\n             * @brief 创建一个全是数字的数组\r\n             *\r\n             * @param env\r\n             * @param intVector\r\n             * @return napi_value\r\n             */\r\n            napi_value Bigint(napi_env env, vector<int> intVector)\r\n            {\r\n                napi_status status;\r\n                napi_value ResultforArray;\r\n                status = napi_create_array(env, &ResultforArray);\r\n                assert(status == napi_ok);\r\n                for (unsigned index = 0; index < intVector.size(); index++)\r\n                {\r\n                    napi_value push_item;\r\n                    int push_item_data = intVector[index];\r\n                    status = napi_create_int64(env, push_item_data, &push_item);\r\n                    assert(status == napi_ok);\r\n                    status = napi_set_element(env, ResultforArray, index, push_item);\r\n                    assert(status == napi_ok);\r\n                }\r\n                return ResultforArray;\r\n            }\r\n            /**\r\n             * @brief 创建一个全是数字的数组\r\n             *\r\n             * @param env\r\n             * @param intVector\r\n             * @return napi_value\r\n             */\r\n            napi_value Boolean(napi_env env, vector<bool> boolVector)\r\n            {\r\n                napi_status status;\r\n                napi_value ResultforArray;\r\n                status = napi_create_array(env, &ResultforArray);\r\n                assert(status == napi_ok);\r\n                for (unsigned index = 0; index < boolVector.size(); index++)\r\n                {\r\n                    napi_value push_item;\r\n                    bool push_item_data = boolVector[index];\r\n                    status = napi_get_boolean(env, push_item_data, &push_item);\r\n                    assert(status == napi_ok);\r\n                    status = napi_set_element(env, ResultforArray, index, push_item);\r\n                    assert(status == napi_ok);\r\n                }\r\n                return ResultforArray;\r\n            }\r\n            /**\r\n             * @brief 创建一个全是文本的 键值对对象\r\n             *\r\n             * @param env\r\n             * @param mapObject\r\n             * @return napi_value\r\n             */\r\n            napi_value Object(napi_env env, map<string, string> mapObject)\r\n            {\r\n                napi_status status;\r\n                napi_value ResultforObject;\r\n                status = napi_create_object(env, &ResultforObject);\r\n                assert(status == napi_ok);\r\n                map<string, string>::iterator it = mapObject.begin();\r\n\r\n                while (it != mapObject.end())\r\n                {\r\n                    status = napi_set_property(env, ResultforObject, create_value::String(env, it->first), create_value::String(env, it->second));\r\n                    assert(status == napi_ok);\r\n                    it++;\r\n                }\r\n\r\n                return ResultforObject;\r\n            }\r\n        }\r\n    };\r\n\r\n    namespace get_value\r\n    {\r\n\r\n    };\r\n\r\n    namespace assert\r\n    {\r\n\r\n    }\r\n}\r\n"
        }
    ]
}